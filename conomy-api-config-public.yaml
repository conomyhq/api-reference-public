swagger: '2.0'
info:
  title: "Conomy Developers \U0001F4D9 API Reference"
  description: "This is **Conomy Developers**, the portal where you cand find our API Reference with everything you need to use our APIs. We've tried to build a friendly documentation, if you have any doubt please don't hesitate to reach us out at hola@conomyhq.com. We hope you enjoy this site \U0001F44B.\n\nCurrently we have a microservices backend architecture serving for different purposes. You can find their description in the left menu with the detail of each of their specific endpoints.\n\n**Addresses Service**: Users addresses information, you can fetch address data with its specific user id, bringing parameters like region, commune, first_address and an optional description address.\n\n**Cards Service**: Cards information, search and match any card that is owned by specific user id and respond an array of card objects. \n\n**Transactions Service**: This service provides transactions information, you can fetch transaction data with its specific card id, bringing parameters like title, amount, currency among others.\n\n**Users Service**: This service provides users information, with its user id you can get all the user data and also make some changes to its personal information.\n\n**Authorization Service**: This service lets the user to have its private pin, letting him take control over his personal data with a configured pin pass. \n\n**Others...*\n\nhttps://giphy.com/gifs/barkpost-barkpost-happy-wednesday-working-like-a-dog-eYilisUwipOEM"
  version: 1.0.0
  contact:
    email: hola@conomyhq.com
    name: Conomy app
host: api.conomy.app
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  firebase:
    name: API Key
    type: apiKey
    in: header
paths:
  '/v1/addresses/{address_id}':
    get:
      tags:
        - Address
      summary: "Get an address from specific address ID \U0001F50E"
      operationId: getAddressId
      description: 'The Addresses service delivers users address. The /addresses/{address_id} endpoint search a specific address by its id and respond an address object. Its properties are an unique id, the user id and the description of the address, including first_address, an optional description address among others.'
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - api_key: []
      parameters: []
      responses:
        '200':
          description: |-
            Search an address by specific id

            Error
          schema:
            $ref: '#/definitions/Address'
          examples:
            Succeed:
              id: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
              user_id: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
              administrative_area_level_1: Valparaiso
              administrative_area_level_2: ConCon
              locality: string
              street: Los Pillines
              street_number: string
              optional_address: '340'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
          examples:
            Bad Request:
              code: 2
              type: GenericError
              detail: A required parameter for this API operation is invalid or has not been provided
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 3
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: UserNotFoundError
              code: 5
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 1
    patch:
      tags:
        - Address
      summary: "Modify an address from a specific address ID \U0001F3D8Ô∏è."
      operationId: modifyAddressId
      description: 'The Addresses service delivers users address. The /addresses/{address_id} endpoint with PATCH method modify the address by its id, being able to modify attributes like administratives areas, locality and optional address and others.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
      parameters:
        - in: body
          name: Address
          description: Address to modify
          schema:
            $ref: '#/definitions/AddressModify'
      responses:
        '201':
          description: address created
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    delete:
      tags:
        - Address
      summary: "Delete an address from a specific address ID \U0001F6A8"
      operationId: deleteAddressId
      description: 'The Addresses service delivers users address. The /addresses/{address_id} endpoint with DELETE method deletes the address by its id.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
      parameters: []
      responses:
        '204':
          description: '{id}    '
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters:
      - type: string
        name: address_id
        in: path
        required: true
        description: Address ID
  /v1/addresses:
    post:
      tags:
        - Address
      summary: "Add an address to a specific user in the system \U0001F3E1"
      operationId: addAddress
      description: 'The Address service delivers users address. The /addresses endpoint with POST method adds an address to a specific user id, setting its attributes like  administratives area, optional address, locality and others.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
      parameters:
        - in: body
          name: Address
          description: Address to add
          schema:
            $ref: '#/definitions/AddressCreate'
          x-examples:
            example-1:
              user_id: string
              administrative_area_level_1: Valparaiso
              administrative_area_level_2: ConCon
              locality: Los Pillines
              optional_address: '340'
              street: string
              street_number: string
      responses:
        '201':
          description: Address created
          schema:
            $ref: '#/definitions/Address'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    get:
      tags:
        - Address
      summary: "Get an address from specific user \U0001F50E"
      operationId: getAddress
      description: 'The Addresses service delivers users address. The /addresses endpoint search an address by it''s user id and respond a body with an array of address objects. Its properties are an unique id, the user id and the description of the address, including administratives area, locality, street, optional address and others.'
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - api_key: []
      parameters:
        - name: user_id
          in: query
          description: User ID
          type: string
          required: true
      responses:
        '200':
          description: Search results matching criteria sent in the request parapameters.
          schema:
            type: object
            properties:
              page:
                type: number
              next_page:
                type: number
              total_addresses:
                type: number
              addresses:
                type: array
                items:
                  $ref: '#/definitions/Address'
          examples:
            Succeed:
              page: 1
              next_page: 1
              total_addresses: 1
              addresses:
                - id: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
                  user_id: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
                  administrative_area_level_1: Valparaiso
                  administrative_area_level_2: ConCon
                  locality: string
                  street: Los Pillines
                  street_number: string
                  optional_address: '340'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
          examples:
            Bad Request:
              code: 2
              type: GenericError
              detail: A required parameter for this API operation is invalid or has not been provided
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 3
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: UserNotFoundError
              code: 4
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 5
    patch:
      tags:
        - Address
      summary: "Modify an address from a specific user \U0001F3D8Ô∏è."
      operationId: modifyAddress
      description: 'The Address service delivers users address. The /addresses endpoint with PATCH method modify the address of specific user id, being able to modify attributes like administratives area, optional address, street, locality.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-address-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
      parameters:
        - name: user_id
          in: query
          description: User ID
          type: string
          required: true
        - in: body
          name: Address
          description: Address to add
          schema:
            $ref: '#/definitions/AddressModify'
      responses:
        '201':
          description: Address modified
          schema:
            $ref: '#/definitions/Address'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  '/v1/cards/{card_id}':
    put:
      tags:
        - Card
      summary: "Set to active a specific card \U0001F6A8"
      operationId: UpdateActiveCard
      description: 'The Cards service delivers cards data. The /cards/{card_id} endpoint with PUT method set one card to "active state" among all user id cards. This means that specific user is going to process all its payments with that active card and omit the others for any payment.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - name: id
          in: path
          description: Card ID from db
          type: string
          format: uuid
          required: true
        - name: active
          in: query
          description: property if search active cards or not
          type: boolean
          required: true
      responses:
        '205':
          description: Card modified
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    delete:
      tags:
        - Card
      summary: "Delete specific card \U0001F4CC"
      operationId: DeleteActiveCard
      description: 'The Cards service delivers cards data. The /cards/{card_id} endpoint with DELETE method deletes a specific card.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - name: id
          in: path
          description: Card ID from db
          type: string
          format: uuid
          required: true
      responses:
        '204':
          description: '{id}'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters:
      - type: string
        name: card_id
        in: path
        required: true
        description: card ID
    get:
      summary: "Get a specific card by card ID \U0001F4B3"
      operationId: getCardId
      responses:
        '200':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Card
      description: 'The Cards service provides information about user''s cards, and the endpoint /cards/{card_id} with the method GET fetch the information about a specific id.'
      parameters: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
  /v1/cards:
    post:
      tags:
        - Card
      summary: "Create a card and add to a specific user \U0001F45B"
      operationId: createCard
      description: 'The Cards service delivers cards data. The /cards endpoint with POST method adds a card owned by a specific user id and save it on an array of card objects, which includes all its cards attributes.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Card
          description: Card schema
          schema:
            $ref: '#/definitions/CardCreate'
      responses:
        '201':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    get:
      tags:
        - Card
      summary: "Get cards by user id  \U0001F4B3"
      operationId: getCardByUserId
      description: |
        The Cards service delivers cards data. The /cards endpoint search and match any card that is owned by specific user id and respond an array of card objects. Its response properties are an unique card id, the card owner user id, issuing bank, card brand (e.g. VISA), cardholder name which is the name written in the card, obfuscated PAN, the card currency and if the card is active or not, also has a description and last updated date.
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - name: user_id
          in: query
          description: User id
          type: string
          required: true
        - name: active
          in: query
          description: card_status
          type: boolean
          required: false
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              page:
                type: string
              next_page:
                type: string
              total_cards:
                type: string
              cards:
                type: array
                items:
                  $ref: '#/definitions/Card'
            required:
              - cards
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  '/v1/conomycards/{conomycard_id}':
    get:
      summary: "Get all the information of a specific Conomy Card \U0001F4B3"
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card:
                id: string
                issuing_bank: string
                card_brand: string
                pan: string
                is_active: true
                currency: string
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: getConomyCardId
      description: The Conomy Card service provides all the data about Conomy Cards and the GET method fetch a specific card by its id.
      tags:
        - Conomy Card
    parameters:
      - type: string
        name: conomycard_id
        in: path
        required: true
        description: Conomy card ID
    put:
      summary: "Set to active a specific card for Conomy Card payment \U0001F4B3 [Deprecated]"
      operationId: putActiveCard
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card: ''
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: 'When the user selects a card to be the default payment from his wallet, the PUT method updates the card that is configured in the Conomy Card.'
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CardCreate'
    patch:
      summary: "Temporary Conomy Card lock \U0001F510"
      operationId: patchToLockCard
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card: ''
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: Updates one Conomy Card's attribute (in this case the attrb is_active)
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              is_active:
                type: boolean
          description: Only the attribute to change to that specific user id's Conomy Card.
    delete:
      summary: "Delete all the information from a specific Conomy Card \U0001F6A8"
      operationId: deleteAll
      responses:
        '204':
          description: '{id}'
          schema: {}
          examples:
            example-1:
              message: Account Deleted
              deleted: true
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: It applies when the user wants to delete his entire Conomy account or needs another Conomy Card so the last one is going to be deleted.
  /v1/conomycards:
    get:
      summary: "Get all the information of a specific Conomy Card \U0001F4B3"
      responses:
        '201':
          description: Response a Conomy Card Object
          schema:
            type: object
            properties:
              page:
                type: string
              next_page:
                type: string
              total_conomy_cards:
                type: string
              conomyCards:
                type: array
                items:
                  $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card:
                id: string
                issuing_bank: string
                card_brand: string
                pan: string
                is_active: true
                currency: string
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: getConomyCard
      description: The Conomy Card service provides all the data about Conomy Cards and the GET method fetch all the card data from a specific user id.
      tags:
        - Conomy Card
      parameters:
        - type: string
          in: header
    parameters: []
    post:
      summary: "Create a new Conomy Card \U0001F4B3"
      operationId: postConomyCard
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card: true
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: The Conomy Card service host all the data about Conomy Cards and the POST method creates a new Conomy Card based on the attributes provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ConomyCardCreate'
          description: Request are all the attributes but active default payment card and description
  /v1/users:
    post:
      tags:
        - User
      summary: "Create a new user in the db \U0001F929"
      operationId: addUser
      description: 'The Users services provides user information. The /users endpoint with a POST method register a new user in the db with its personal information such as name, last name, national id, phone among other data.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    get:
      tags:
        - User
      summary: "Get a list of all users \U0001F603"
      operationId: getUsers
      description: 'The Users service provides user information. The /users endpoint with a GET method list all users registered in the db with its personal information such as name, last name, national id, phone among other data.'
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: List users from the db.
          schema:
            type: object
            properties:
              page:
                type: string
              next_page:
                type: string
              total_users:
                type: string
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  '/v1/users/{user_id}':
    get:
      tags:
        - User
      summary: "Get a specific user \U0001F60A"
      operationId: getUser
      description: 'The Users service provides user information. The /users/{id} endpoint with a GET method fetch a specific user by its user id from the db with its personal information such as name, last name, national id, phone among other data.'
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: search results matching criteria
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    patch:
      tags:
        - User
      summary: "Update an user in the db by its user id \U0001F62C"
      operationId: updateUser
      description: 'The Users service provides user information. The /users/{id} endpoint with a PATCH method modify a specific user''s attribute by its user id in the db.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User to update
          schema:
            $ref: '#/definitions/UserModify'
      responses:
        '201':
          description: User modified
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    delete:
      summary: "Delete specific user by its user id \U0001F6A8"
      operationId: deleteUser
      responses:
        '204':
          description:
            id: null
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - User
      description: 'The Users service provides user information. The /users/{id} endpoint with DELETE method deletes a user from the db forever and ever.'
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
        description: User ID
  /v1/transactions:
    get:
      summary: "Get a list of transactions \U0001F3F7Ô∏è"
      description: The Transactions service provides transactions information. The /transactions endpoint with a GET method list transactionby its category with its agreggation sum filtered by date and user id.
      operationId: GetTransactionsCategories
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-transaction-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: query
          name: user_id
          type: string
          required: true
          description: User uid
        - in: query
          name: start_date
          type: string
          format: date-time
          required: true
          description: star Date
        - in: query
          name: end_date
          type: string
          format: date-time
          required: true
          description: end Date
      responses:
        '200':
          description: Transactions categories filtered
          schema:
            type: object
            properties:
              page:
                type: string
              next_page:
                type: string
              total_transactions:
                type: string
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Transaction
    post:
      tags:
        - Transaction
      summary: "Create a transaction for a specific card \U0001F4DD"
      description: The Transactions service provides transactions information. The /transactions endpoint with a POST method creates a transaction in the db for a specific card and user id.
      operationId: CreateTransactions
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-transaction-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Transaction
          description: Transaction schema
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        '201':
          description: Transaction created
          schema:
            $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  '/v1/transactions/{transaction_id}':
    get:
      tags:
        - Transaction
      summary: "Get a specific transaction by its transaction id\U0001F4D6"
      description: The Transactions service provides transactions information. The /transactions endpoint with a GET method fetch a specific transaction by its transaction id.
      operationId: GetTransactionsSearch
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-transaction-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters: []
      responses:
        '200':
          description: Transactions filtered
          schema:
            $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    patch:
      tags:
        - Transaction
      summary: "Modify a transaction for specifics card and user id \U0001F4CB"
      operationId: ModifyTransaction
      description: The Transactions service provides transactions information. The /transactions endpoint with a PATCH method allows to modify customizable fields for a specific transaction.
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-transaction-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - name: id
          in: path
          description: transaction ID
          type: string
          format: uuid
          required: true
        - in: body
          name: Transaction
          description: Transaction schema
          schema:
            $ref: '#/definitions/TransactionModify'
      responses:
        '200':
          description: Succes modified
          schema:
            $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    delete:
      tags:
        - Transaction
      summary: "Delete a specific card's transaction \U0001F6A8"
      description: 'The Transactions service provides transactions information. The /transactions/{id} endpoint with a DELETE method deletes a specific transaction forever and ever.'
      operationId: DeleteTransactionsSearch
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-transaction-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters: []
      responses:
        '204':
          description: '{id}'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters:
      - type: string
        name: transaction_id
        in: path
        required: true
  /v1/rules:
    parameters: []
    get:
      summary: ''
      operationId: get-v1-rules
      responses:
        '200':
          description: OK
  /v1/pin/authorization:
    post:
      summary: "Validate pin authentication for a specific user id \U0001F510"
      operationId: ValidatePin
      description: The Pin service provides user's password information. The /pin/authorization endpoint with a POST validates user's pin against the value saved in the db. This gives the user the permission to gain access for different information inside the app and the permission to realize more personal actions.
      security:
        - firebase: []
      x-google-backend:
        address: 'https://auth-service-conomy-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Token
          description: Token to be matched
          schema:
            $ref: '#/definitions/UserPin'
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Pin
  /v1/pin:
    post:
      summary: "Create a new pin linked to a specific user id \U0001F511"
      x-google-backend:
        address: 'https://auth-service-conomy-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
      parameters:
        - in: body
          name: Token
          description: Token to be matched
          schema:
            $ref: '#/definitions/UserPin'
      responses:
        '201':
          description: 'Ok, pin created'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: CreatePin
      description: The Pin service provides user's password information. The /pin endpoint with a POST creates a user's pin and save it in the db. This gives the user the permission to gain access for different information and have more control over his personal data.
      tags:
        - Pin
  /v1/switch:
    get:
      summary: "Transaction switch \U0001F511"
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties: {}
        '400':
          description: Bad Request - A required parameter for this API operation is invalid or has not been provided.
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                error:
                  detail: A required parameter for this API operation is invalid or has not been provided
                  type: GenericError
                  code: 3
            properties:
              error:
                type: object
                required:
                  - detail
                  - type
                  - code
                properties:
                  detail:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                  code:
                    type: number
            required:
              - error
          examples:
            example-1:
              value:
                error:
                  detail: A required parameter for this API operation is invalid or has not been provided
                  type: GenericError
                  code: 3
        '401':
          description: Invalid or missing authentication token.
          examples:
            example-1:
              value:
                message: Jwt is missing
                code: 401
          schema:
            description: ''
            type: object
            properties:
              message:
                type: string
                minLength: 1
              code:
                type: number
            required:
              - message
              - code
            x-examples:
              example-1:
                message: Jwt is missing
                code: 401
        '404':
          description: Data not found in the DB.
          examples:
            example-1:
              value:
                error:
                  detail: The user could not be found in the DB
                  type: AddressesError
                  code: 34
          schema:
            description: ''
            type: object
            properties:
              error:
                type: object
                properties:
                  detail:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                  code:
                    type: number
                required:
                  - detail
                  - type
                  - code
            required:
              - error
            x-examples:
              example-1:
                error:
                  detail: The user could not be found in the DB
                  type: AddressesError
                  code: 34
        '500':
          description: Internal server error.
          schema:
            description: ''
            type: object
            properties:
              message:
                type: string
                minLength: 1
              code:
                type: number
            required:
              - message
              - code
            x-examples:
              example-1:
                message: Internal Server Error
                code: 500
          examples:
            example-1:
              value:
                message: Internal Server Error
                code: 500
      operationId: transactionSwitch
      description: ''
      tags:
        - Transaction Switch
        - hola
    parameters: []
  /v1/goals-challenges:
    post:
      summary: Create goal or challenge
      tags:
        - Goals & Challenges
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/GoalandChallengeCreateResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: post-v1-goals
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallengeCreate'
          description: Goal & challenge schema
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a POST method register a new goal or challenge in the db with  a goal and challenge model field.
      x-internal: true
    parameters: []
    get:
      summary: Get goals and challenges by user_id
      operationId: get-v1-goals-challenges
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalschallenges:
                $ref: '#/definitions/GoalandChallenge'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a GET method fetch a goals and challenges by user_upayments_uuid
      parameters:
        - type: string
          in: query
          name: user_upayments_uuid
          description: upayments user identifier
      tags:
        - Goals & Challenges
      x-internal: true
  '/v1/goals-challenges/{id}':
    get:
      summary: Get goal or challenge by id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-goals-challenge
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a GET method fetch a specific goal or challenge by id'
      parameters: []
      tags:
        - Goals & Challenges
      x-internal: true
    put:
      summary: Modify goal or challenge by id
      operationId: put-v1-goals-challenge
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method updates a goal or challenge values by id'
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallenge'
      tags:
        - Goals & Challenges
      x-internal: true
    parameters:
      - type: string
        name: id
        in: path
        required: true
    delete:
      summary: Delete goal or challenge by id
      operationId: delete-v1-goals-challenges-id
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error404'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method deletes a goal or challenge values by id'
      tags:
        - Goals & Challenges
      x-internal: true
  /v1/rest/goals-challenges/:
    post:
      summary: Create goal
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/GoalandChallengeFilteredResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: post-v1-gch-composite-goals
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallengeCreate'
          description: Goal & challenge schema
      description: The goals and challenges compound is responsible for handling and fitting the requests of the goals and challenges module. The /gch-composite/goals-challenges endpoint with a POST method register a new goal or challenge in the db with  a goal and challenge model field.
      tags:
        - Goals & Challenges composite
    parameters: []
    get:
      summary: Get goals and challenges by user_id
      operationId: get-v1-gch-composite-goals-challenges
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalsChallenges:
                $ref: '#/definitions/GoalandChallengeFiltered'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /rest/goals-challenges endpoint with a GET method fetch a goals and challenges by user_upayments_uuid
      parameters:
        - type: string
          in: query
          name: user_upayments_uuid
          description: upayments user identifier
      tags:
        - Goals & Challenges composite
  '/v1/rest/goals-challenges/{id}/confirm':
    parameters:
      - type: string
        name: id
        in: path
        required: true
        description: Goal or Challenge identifier
    post:
      summary: Complete the setup of an objective or challenge
      operationId: post-v1-goals-challenges-composite-id-confirm
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /rest/goals-challenges/{id}/confirm endpoint with a POST method confirms the goal or challenge attempt.'
      tags:
        - Goals & challenges composite
  '/v1/rest/goals-challenges/{id}':
    get:
      summary: Get goal or challenge by id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeFilteredResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-gch-composite-goals-challenge
      description: 'The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /rest/goals-challenges/{id} endpoint with a GET method fetch a specific goal or challenge by id'
      parameters: []
      tags:
        - Goals & Challenges composite
    put:
      summary: Modify goal or challenge by id
      operationId: put-v1-gch-composite-goals-challenge
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeFilteredResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /gch-composite/goals-challenges endpoint with a PUT method updates a goal or challenge values by id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallengeModify'
      tags:
        - Goals & Challenges composite
    parameters:
      - type: string
        name: id
        in: path
        required: true
        description: Goal or Challenge identifier
    delete:
      summary: Delete goal or challenge by id
      operationId: delete-v1-gch-composite-goals-challenges-id
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error404'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /gch-composite/goals-challenges endpoint with a PUT method deletes a goal or challenge values by id
      tags:
        - Goals & Challenges composite
  '/v1/goals-challenges/{id}/confirm':
    parameters:
      - type: string
        name: id
        in: path
        required: true
        description: Goal or Challenge identifier
    post:
      summary: Complete the setup of an objective or challenge
      operationId: post-v1-goals-challenges-id-confirm
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id}/confirm endpoint with a POST method confirms the goal or challenge attempt.'
      tags:
        - Goals & challenges
  /v1/rest/goals-challenges/rules:
    parameters: []
    get:
      summary: Get rules applicable to a goal
      operationId: get-v1-gch-composite-rules
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/RuleFiltered'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges composite is responsible for handling and fitting the requests of the goals and challenges module. The /gch-composite/goals-challenges/rules endpoint with a GET method fetch all rules related to a goal
      parameters: []
      tags:
        - Goals & Challenges composite
  /v1/authorize:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-v1-auth
    parameters: []
  /v1/auth:
    post:
      summary: Auth
      operationId: post-v1-auth
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: |
        The auth service is responsable for handling our conomy user session. The /auth endpoint with POST method create a user session
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateSession'
        - type: string
          in: header
          name: X-Application-id
          description: IMEI or app identifier
      tags:
        - Auth
      security:
        - firebase: []
  /v1/auth/refresh:
    post:
      summary: Refresh Token
      operationId: post-v1-auth-refresh
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The auth service is responsable for handling our conomy user session. The /auth/refresh endpoint with POST method refreshes the user session
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CreateSession'
          description: ''
        - type: string
          in: header
          name: X-Refresh-Token
          description: Conomy refresh token
        - type: string
          in: header
          name: X-Application-Id
          description: IMEI or app identifier
      tags:
        - Auth
      security:
        - firebase: []
    parameters: []
  /v1/auth/validate:
    parameters: []
    get:
      summary: Validate session
      operationId: get-v1-auth-validate
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              userId:
                type: string
                description: Conomy user identifier
              message:
                type: string
                description: human readable message
              expiration:
                type: string
                description: 'Expiration time [min]'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
      description: The auth service is responsable for handling our conomy user session. The /auth/validate endpoint with GET method validates the conomy user token
      tags:
        - Auth
      security:
        - firebase: []
      parameters:
        - type: string
          in: header
          name: Conomy-Token
          description: User conomy token
        - type: string
          in: header
          name: X-Application-id
          description: IMEI or app identifier
definitions:
  Address:
    type: object
    description: This is a model to represent user address
    properties:
      id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      user_id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
      street:
        type: string
        example: Los Pillines
      street_number:
        type: string
      optional_address:
        type: string
        example: '340'
        description: Like an apartment number
    required:
      - id
      - user_id
      - administrative_area_level_1
      - administrative_area_level_2
      - street
      - optional_address
  AddressModify:
    type: object
    properties:
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  AddressCreate:
    type: object
    properties:
      user_id:
        type: string
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  Rule:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
      processes:
        type: array
        description: Processes are atomic operations that when accomplished in sequence define and apply the rule as a whole
        items:
          $ref: '#/definitions/RuleProcess'
    required:
      - id
      - type
      - description
      - processes
  RuleFiltered:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    title: ''
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
    required:
      - id
      - type
      - description
  RuleProcess:
    type: object
    description: 'Atomic process definition, it applies one simple operation of the rule. It follows a simple operation syntax, left variable + operation + right variable.'
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
      description:
        type: string
        description: Rule description for human reading
      leftVariable:
        type: string
      rightVariable:
        type: string
      operation:
        type: string
    required:
      - id
      - type
      - description
  Card:
    type: object
    x-examples:
      example-1:
        id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        card_issuer: BancoDeChile
        card_brand: MasterCard
        holder_card_name: Pablo insulza
        card_number: '************1234'
        currency: CLP
        is_active: false
        created_at: '2017-07-21T17:32:28Z'
        updated_at: '2017-07-21T17:32:28Z'
        color: red
        card_account_type: cuenta vista
        description: {}
    properties:
      id:
        type: string
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        description: user conomy identifier
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
    required:
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
      - createdAt
      - updatedAt
  CardCreate:
    type: object
    x-examples:
      example-1:
        id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        card_issuer: BancoDeChile
        card_brand: MasterCard
        holder_card_name: Pablo insulza
        card_number: '************1234'
        currency: CLP
        is_active: false
        created_at: '2017-07-21T17:32:28Z'
        updated_at: '2017-07-21T17:32:28Z'
        color: string
        card_account_type: cuenta vista
        description: {}
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        description: User conomy id
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
    required:
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
  ConomyCard:
    type: object
    title: Conomy Card
    description: ''
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      user_id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuing_bank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      card_brand:
        type: string
        example: MasterCard
      cardholder_name:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      is_active:
        type: boolean
        example: false
        description: Card state
      created_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updated_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      description:
        type: string
    required:
      - id
      - user_id
      - issuing_bank
      - card_brand
      - cardholder_name
      - pan
      - currency
      - is_active
      - created_at
      - updated_at
      - description
  ConomyCardCreate:
    type: object
    title: Conomy Card Create
    description: ''
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      user_id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuing_bank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      card_brand:
        type: string
        example: MasterCard
      cardholder_name:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      is_active:
        type: boolean
        example: false
        description: Card state
      created_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updated_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      description:
        type: string
    required:
      - id
      - user_id
      - issuing_bank
      - card_brand
      - cardholder_name
      - pan
      - currency
      - is_active
  Transaction:
    type: object
    x-examples: {}
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      card_id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      description:
        type: string
        example: clothes
      category:
        type: string
        example: bars&restaurants
      amount:
        type: number
        format: float
        example: -196690
      currency:
        type: string
        example: CLP
      transaction_date:
        type: integer
        example: 1616021369
      expanded:
        $ref: '#/definitions/ExpandedInfo'
      created_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updated_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      issuing_bank:
        type: string
        example: Banco de Chile
      transaction_type:
        type: string
        description: if is in/out transaction
        example: out
      merchant:
        type: string
        example: Bar Alonso
      brand_category:
        type: string
        description: e.g. Master Card merchant code
        example: '303'
      taxing_code:
        type: string
        description: e.g. SII code
        example: '2'
    required:
      - id
      - description
      - amount
      - currency
      - transaction_date
      - expanded
      - created_at
      - updated_at
  TransactionModify:
    type: object
    x-examples: {}
    properties:
      description:
        type: string
        example: clothes
      category:
        type: string
        example: bars&restaurants
      amount:
        type: number
        format: float
        example: -196690
      currency:
        type: string
        example: CLP
      issuing_bank:
        type: string
        example: Banco de Chile
      transaction_type:
        type: string
        example: out
      merchant:
        type: string
        example: la tiendita
      brand_category:
        type: string
        example: '403'
        description: category provided by MasterCard for example
      taxing_code:
        type: string
        description: Code provided by tax service
        example: '22'
  ExpandedInfo:
    type: object
    x-examples: {}
    properties:
      location:
        type: string
        example: 'Santiago, Chile'
      receipt:
        type: string
        example: url
      score:
        type: number
        format: float
        example: 3.5
  CategoryItem:
    type: object
    properties:
      type:
        type: string
        description: type descriptor
        example: pharmacy
      total:
        type: number
        description: total sum of category transactions
        example: -30000
  User:
    type: object
    description: Conomy User Model
    properties:
      id:
        type: string
        format: uuid
        example: b92e761a-279a-11ec-9621-0242ac130002
      userExternalId:
        type: string
        description: User u-payments uuid
      name:
        type: string
        example: Mauricio
        description: User name
      lastName:
        type: string
        example: Gatica
        description: user last name
      nickName:
        type: string
        example: JFT
        description: user nickname
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      phone:
        type: string
        example: '+5691238159123'
        description: phone number
      career:
        type: string
        description: User career/ocuppation
      gender:
        type: string
        description: 'FEMALE, MALE, OTHER'
      email:
        type: string
        description: user email
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW '
    required:
      - id
      - userExternalId
      - name
      - lastName
      - nickName
      - dni
      - phone
      - career
      - gender
      - email
      - maritalStatus
  UserModify:
    description: ''
    type: object
    x-examples:
      example-1:
        user_id: b92e761a-279a-11ec-9621-0242ac130002
        name: Mauricio
        nick_name: JFT
        last_name: Gatica
        rut: 12.612.412-2
        phone: '+5691238159123'
        account: user
        password_pin: '2424'
        profession: string
        gender: string
        civil_status: string
        email: string
    properties:
      name:
        type: string
        description: User name
      lastName:
        type: string
        description: User last name
      email:
        type: string
        minLength: 1
        description: user email
      nickName:
        type: string
        minLength: 1
        description: user nick name
      phone:
        type: string
        minLength: 1
        description: phone number
      career:
        type: string
        minLength: 1
        description: user career/ocuppation
      gender:
        type: string
        minLength: 1
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        minLength: 1
        description: 'User civil status. MARRIED, SINGLE, DIVORCED, WIDOW'
  UserCreate:
    type: object
    properties:
      userExternald:
        type: string
        description: user u-payments uuid
      name:
        type: string
        example: Mauricio
        description: user name
      lastName:
        type: string
        example: Gatica
        description: user last name
      nickName:
        type: string
        description: User nickname
      email:
        type: string
        description: user email
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      phone:
        type: string
        description: User phone number
      career:
        type: string
        description: user career/ocuppation
      gender:
        type: string
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW'
    required:
      - userExternald
  UserPin:
    type: object
    title: UserPin
    properties:
      id:
        type: string
        format: uuid
        example: b92e761a-279a-11ec-9621-0242ac130002
        description: Firebase ID
      user_id:
        type: string
      password_pin:
        type: string
        example: vK6q83OnsWqRCN3C37Ikl/T4DwWpnumo1CR305oEkkhRdp4ua6TJeif309Es0x9t7snE04hu48eLw5zSVg/+y5rWNPBFg4rnka6j0btuD3htbdkm8emx+d6JcOk8/xlIWr4ifZvF5t5fuj2fqWZzgDxnF5TJxWWLETHGCl1FduK3rZj4Yh6MtoYjhqqVVuFaXwoZEka77K5HO2sQ11l03qnbAk+cV+ZjNyAD24Qgi+wrRG0pGJ3BHUy7K0jF1umKCJDd8ILfM7GD1/+fuTU4RMMJ0PFpbKnMp3kTSwwTpSJ0j3tgchXvfTc4sAx/aQgdVerdHnhFSMnoVbsV/TiBRg==
      created_at:
        type: string
      updated_at:
        type: string
    required:
      - id
      - password_pin
  Error400:
    title: BadRequestError
    type: object
    x-examples: {}
    properties:
      code:
        type: number
        example: 2
      type:
        type: string
        example: GenericError
      detail:
        type: string
        example: A required parameter for this API operation is invalid or has not been provided
    required:
      - code
      - type
      - detail
    description: ''
  Error401:
    title: UnauthorizedError
    type: object
    x-examples:
      Unauthorized Error 401:
        detail: Jwt is missing
        type: AuthError
        code: 3
    properties:
      code:
        type: number
        example: 401
      type:
        type: string
        example: AuthError
      detail:
        type: string
        example: Jwt is missing
    required:
      - code
      - type
      - detail
  Error404:
    title: NotFoundError
    type: object
    x-examples:
      example-1:
        code: 4
        type: UserNotFound
        detail: The user could not be found in the DB
    properties:
      code:
        type: number
        example: 404
      type:
        type: string
        example: NotFoundError
      detail:
        type: string
        example: The user could not be found in the DB
    required:
      - code
      - type
      - detail
  Error500:
    title: InternalServerError
    type: object
    x-examples:
      example-1:
        code: 5
        type: ServerError
        detail: Internal Server Error
    properties:
      code:
        type: number
        example: 500
      type:
        type: string
        example: ServerError
      detail:
        type: string
        example: Internal Server Error
    required:
      - code
      - type
      - detail
  GoalandChallenge:
    title: Goal&Challenge Response
    type: object
    description: Goal and challenge response model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
  GoalandChallengeResponse:
    title: Goal&Challenge
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeFiltered:
    title: Goal&ChallengeFiltered
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
  GoalandChallengeFilteredResponse:
    title: Goal&ChallengeFilteredResponse
    type: object
    description: Goal and challenge filtered response model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeModify:
    title: Goal&ChallengeModify
    type: object
    description: Goal and challenge model
    properties:
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      rules:
        type: array
        description: rulesId
        items:
          type: string
  GoalandChallengeCreate:
    title: Goal&ChallengeCreate
    type: object
    description: Goal and challenge model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
  GoalandChallengeCreateResponse:
    title: Goal&ChallengeCreate Response
    type: object
    description: Goal and challenge response model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  CreateSession:
    title: CreateSession
    type: object
    properties:
      userExternalId:
        type: string
        description: u-payments user id
      ttl:
        type: integer
        description: Time to live. Value for the period of time that session should exist
    required:
      - userExternalId
  Session:
    title: Session
    type: object
    properties:
      conomyToken:
        type: string
        description: User conomy token
      refreshToken:
        type: string
        description: Refresh Token
      expiration:
        type: string
        description: 'Expiration time [min]'
      _links:
        type: array
        description: A list of link types and descriptions for token validation. Conomy provides this paramenter
        items:
          $ref: '#/definitions/_links'
  _links:
    title: _links
    type: object
    description: A list of link types and descriptions.
    properties:
      rel:
        type: string
        description: This describes the type of links
      route:
        type: string
        description: This property contais a full-qualified URL
      method:
        type: string
        description: The HTTP method that should be used
      targetSchema:
        type: string
        description: 'For requests, this is a URL representing the schema that the response should conform to.'
      schema:
        type: string
        description: 'For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.'
    required:
      - rel
      - route
      - method
  RefreshToken:
    title: RefreshToken
    type: object
    description: ''
    properties:
      userExternalUuid:
        type: string
        description: u-payments user id
      conomyToken:
        type: string
        description: User conomy token
      ttl:
        type: string
        description: Time to live. Value for the period of time that session should exist
    required:
      - userExternalUuid
      - conomyToken
      - ttl
  ValidatedSession:
    title: ValidatedSession
    type: object
    properties:
      userExternalUuid:
        type: string
      message:
        type: string
    required:
      - userExternalUuid
      - message
consumes:
  - application/json
responses: {}
