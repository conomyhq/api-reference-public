swagger: '2.0'
info:
  title: "Conomy Developers \U0001F4D9 API Reference"
  description: "This is **Conomy Developers**, the portal where you cand find our API Reference with everything you need to use our APIs. We've tried to build a friendly documentation, if you have any doubt please don't hesitate to reach us out at hola@conomyhq.com. We hope you enjoy this site \U0001F44B.\n\nCurrently we have a microservices backend architecture serving for different purposes. You can find their description in the left menu with the detail of each of their specific endpoints.\n\n**Addresses Service**: Users addresses information, you can fetch address data with its specific user id, bringing parameters like region, commune, first_address and an optional description address.\n\n**Cards Service**: Cards information, search and match any card that is owned by specific user id and respond an array of card objects. \n\n**Transactions Service**: This service provides transactions information, you can fetch transaction data with its specific card id, bringing parameters like title, amount, currency among others.\n\n**Users Service**: This service provides users information, with its user id you can get all the user data and also make some changes to its personal information.\n\n**Authorization Service**: This service lets the user to have its private pin, letting him take control over his personal data with a configured pin pass. \n\n**Others...*\n\nhttps://giphy.com/gifs/barkpost-barkpost-happy-wednesday-working-like-a-dog-eYilisUwipOEM"
  version: 1.0.0
  contact:
    email: hola@conomyhq.com
    name: Conomy app
host: conomy-data-report-composite-ylggeyc7ba-uc.a.run.app
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  firebase:
    name: API Key
    type: apiKey
    in: header
paths:
  '/card/{card_id}':
    parameters:
      - type: string
        name: card_id
        in: path
        required: true
        description: card ID
    get:
      summary: "Get a specific card by card ID \U0001F4B3"
      operationId: getCardId
      responses:
        '200':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Card
      description: 'The Cards service provides information about user''s cards, and the endpoint /cards/{card_id} with the method GET fetch the information about a specific id.'
      parameters: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - firebase: []
  /card:
    post:
      tags:
        - Card
      summary: "Create a card and add to a specific user \U0001F45B"
      operationId: createCard
      description: 'The Cards service delivers cards data. The /cards endpoint with POST method adds a card owned by a specific user id and save it on an array of card objects, which includes all its cards attributes.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-card-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Card
          description: Card schema
          schema:
            $ref: '#/definitions/CardCreate'
      responses:
        '201':
          description: Card information
          schema:
            $ref: '#/definitions/CardCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
  '/conomyCard/{conomycard_id}':
    get:
      summary: "Get all the information of a specific Conomy Card \U0001F4B3"
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card:
                id: string
                issuing_bank: string
                card_brand: string
                pan: string
                is_active: true
                currency: string
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: getConomyCardId
      description: The Conomy Card service provides all the data about Conomy Cards and the GET method fetch a specific card by its id.
      tags:
        - Conomy Card
    parameters:
      - type: string
        name: conomycard_id
        in: path
        required: true
        description: Conomy card ID
  /conomyCard:
    parameters: []
    post:
      summary: "Create a new Conomy Card \U0001F4B3"
      operationId: postConomyCard
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCardCreate'
          examples:
            example-1:
              id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              user_id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
              issuing_bank: BancoDeChile
              card_brand: MasterCard
              cardholder_name: Pablo insulza
              pan: '************1234'
              currency: CLP
              is_active: false
              created_at: '2017-07-21T17:32:28Z'
              updated_at: '2017-07-21T17:32:28Z'
              active_card: true
              description: ''
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: The Conomy Card service host all the data about Conomy Cards and the POST method creates a new Conomy Card based on the attributes provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ConomyCardCreate'
          description: Request are all the attributes but active default payment card and description
  /user:
    post:
      tags:
        - User
      summary: "Create a new user in the db \U0001F929"
      operationId: addUser
      description: 'The Users services provides user information. The /users endpoint with a POST method register a new user in the db with its personal information such as name, last name, national id, phone among other data.'
      consumes:
        - application/json
      security:
        - firebase: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/UserCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
  '/user/{user_id}':
    get:
      tags:
        - User
      summary: "Get a specific user \U0001F60A"
      operationId: getUser
      description: 'The Users service provides user information. The /users/{id} endpoint with a GET method fetch a specific user by its user id from the db with its personal information such as name, last name, national id, phone among other data.'
      security:
        - api_key: []
      x-google-backend:
        address: 'https://conomy-user-service-h4gib2s4ya-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: search results matching criteria
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
        description: User ID
  /transaction:
    post:
      summary: "Transaction switch \U0001F511"
      operationId: transactionSwitch
      description: The Switch service receive transaction's information. The /transaction endpoint with a POST method register every transaction.
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-switch-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/SwitchTransaction'
          x-examples: {}
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/SwitchTransactionResponse'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Transaction Switch
    parameters: []
definitions:
  Address:
    type: object
    description: This is a model to represent user address
    properties:
      id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      user_id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
      street:
        type: string
        example: Los Pillines
      street_number:
        type: string
      optional_address:
        type: string
        example: '340'
        description: Like an apartment number
    required:
      - id
      - user_id
      - administrative_area_level_1
      - administrative_area_level_2
      - street
      - optional_address
  AddressModify:
    type: object
    properties:
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  AddressCreate:
    type: object
    properties:
      user_id:
        type: string
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  Rule:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
      processes:
        type: array
        description: Processes are atomic operations that when accomplished in sequence define and apply the rule as a whole
        items:
          $ref: '#/definitions/RuleProcess'
    required:
      - id
      - type
      - description
      - processes
  RuleFiltered:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    title: ''
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
    required:
      - id
      - type
      - description
  RuleProcess:
    type: object
    description: 'Atomic process definition, it applies one simple operation of the rule. It follows a simple operation syntax, left variable + operation + right variable.'
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
      description:
        type: string
        description: Rule description for human reading
      leftVariable:
        type: string
      rightVariable:
        type: string
      operation:
        type: string
    required:
      - id
      - type
      - description
  Card:
    type: object
    x-examples: {}
    properties:
      id:
        type: string
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        description: user conomy identifier
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
    required:
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  CardCreate:
    type: object
    x-examples:
      example-1:
        id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        card_issuer: BancoDeChile
        card_brand: MasterCard
        holder_card_name: Pablo insulza
        card_number: '************1234'
        currency: CLP
        is_active: false
        created_at: '2017-07-21T17:32:28Z'
        updated_at: '2017-07-21T17:32:28Z'
        color: string
        card_account_type: cuenta vista
        description: {}
    properties:
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        description: User conomy id
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
    required:
      - externalId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
  ConomyCard:
    type: object
    title: Conomy Card
    description: ''
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      description:
        type: string
    required:
      - id
      - userId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  ConomyCardCreate:
    type: object
    title: Conomy Card Create
    description: ''
    properties:
      externalId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      description:
        type: string
    required:
      - externalId
      - cardBrand
      - cardholderName
      - pan
      - currency
  Transaction:
    type: object
    x-examples: {}
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      card_id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      description:
        type: string
        example: clothes
      category:
        type: string
        example: bars&restaurants
      amount:
        type: number
        format: float
        example: -196690
      currency:
        type: string
        example: CLP
      transaction_date:
        type: integer
        example: 1616021369
      expanded:
        $ref: '#/definitions/ExpandedInfo'
      created_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updated_at:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      issuing_bank:
        type: string
        example: Banco de Chile
      transaction_type:
        type: string
        description: if is in/out transaction
        example: out
      merchant:
        type: string
        example: Bar Alonso
      brand_category:
        type: string
        description: e.g. Master Card merchant code
        example: '303'
      taxing_code:
        type: string
        description: e.g. SII code
        example: '2'
    required:
      - id
      - description
      - amount
      - currency
      - transaction_date
      - expanded
      - created_at
      - updated_at
  TransactionModify:
    type: object
    x-examples: {}
    properties:
      description:
        type: string
        example: clothes
      category:
        type: string
        example: bars&restaurants
      amount:
        type: number
        format: float
        example: -196690
      currency:
        type: string
        example: CLP
      issuing_bank:
        type: string
        example: Banco de Chile
      transaction_type:
        type: string
        example: out
      merchant:
        type: string
        example: la tiendita
      brand_category:
        type: string
        example: '403'
        description: category provided by MasterCard for example
      taxing_code:
        type: string
        description: Code provided by tax service
        example: '22'
  ExpandedInfo:
    type: object
    x-examples: {}
    properties:
      location:
        type: string
        example: 'Santiago, Chile'
      receipt:
        type: string
        example: url
      score:
        type: number
        format: float
        example: 3.5
  CategoryItem:
    type: object
    properties:
      type:
        type: string
        description: type descriptor
        example: pharmacy
      total:
        type: number
        description: total sum of category transactions
        example: -30000
  User:
    type: object
    description: Conomy User Model
    properties:
      id:
        type: string
        example: b92e761a-279a-11ec-9621-0242ac130002
      userExternalId:
        type: string
        description: User u-payments uuid
      name:
        type: string
        example: Mauricio
        description: User name
      nickName:
        type: string
        example: JFT
        description: user nickname
      lastName:
        type: string
        example: Gatica
        description: user last name
      email:
        type: string
        description: user email
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW '
      phone:
        type: string
        example: '+5691238159123'
        description: phone number
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      career:
        type: string
        description: User career/ocuppation
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
    required:
      - id
      - userExternalId
      - name
      - lastName
      - email
      - maritalStatus
      - phone
      - dni
      - career
      - address
      - status
      - contractId
  UserModify:
    description: ''
    type: object
    x-examples:
      example-1:
        user_id: b92e761a-279a-11ec-9621-0242ac130002
        name: Mauricio
        nick_name: JFT
        last_name: Gatica
        rut: 12.612.412-2
        phone: '+5691238159123'
        account: user
        password_pin: '2424'
        profession: string
        gender: string
        civil_status: string
        email: string
    properties:
      name:
        type: string
        description: User name
      lastName:
        type: string
        description: User last name
      email:
        type: string
        minLength: 1
        description: user email
      nickName:
        type: string
        minLength: 1
        description: user nick name
      phone:
        type: string
        minLength: 1
        description: phone number
      career:
        type: string
        minLength: 1
        description: user career/ocuppation
      gender:
        type: string
        minLength: 1
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        minLength: 1
        description: 'User civil status. MARRIED, SINGLE, DIVORCED, WIDOW'
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
  UserCreate:
    type: object
    properties:
      userExternalId:
        type: string
        description: user u-payments uuid
      name:
        type: string
        example: Mauricio
        description: user name
      lastName:
        type: string
        example: Gatica
        description: user last name
      nickName:
        type: string
        description: User nickname
      email:
        type: string
        description: user email
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      phone:
        type: string
        description: User phone number
      career:
        type: string
        description: user career/ocuppation
      gender:
        type: string
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW'
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
    required:
      - userExternalId
  SwitchTransaction:
    description: ''
    type: object
    properties:
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
    required:
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
    x-examples:
      example-1:
        idConomyCardReferenceToken: test
        amount: test
        currency: clp
        transactionId: test
  SwitchTransactionResponse:
    description: ''
    type: object
    properties:
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
      links:
        type: array
        items:
          required: []
          properties: {}
    required:
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
      - links
    x-examples:
      example-1:
        idConomyCardReferenceToken: asd
        amount: as
        currency: clp
        transactionId: iasd
        links: []
  UserPin:
    type: object
    title: UserPin
    properties:
      id:
        type: string
        format: uuid
        example: b92e761a-279a-11ec-9621-0242ac130002
        description: Firebase ID
      user_id:
        type: string
      password_pin:
        type: string
        example: vK6q83OnsWqRCN3C37Ikl/T4DwWpnumo1CR305oEkkhRdp4ua6TJeif309Es0x9t7snE04hu48eLw5zSVg/+y5rWNPBFg4rnka6j0btuD3htbdkm8emx+d6JcOk8/xlIWr4ifZvF5t5fuj2fqWZzgDxnF5TJxWWLETHGCl1FduK3rZj4Yh6MtoYjhqqVVuFaXwoZEka77K5HO2sQ11l03qnbAk+cV+ZjNyAD24Qgi+wrRG0pGJ3BHUy7K0jF1umKCJDd8ILfM7GD1/+fuTU4RMMJ0PFpbKnMp3kTSwwTpSJ0j3tgchXvfTc4sAx/aQgdVerdHnhFSMnoVbsV/TiBRg==
      created_at:
        type: string
      updated_at:
        type: string
    required:
      - id
      - password_pin
  Error400:
    title: BadRequestError
    type: object
    x-examples: {}
    properties:
      code:
        type: number
        example: 2
      type:
        type: string
        example: GenericError
      detail:
        type: string
        example: A required parameter for this API operation is invalid or has not been provided
    required:
      - code
      - type
      - detail
    description: ''
  Error401:
    title: UnauthorizedError
    type: object
    x-examples:
      Unauthorized Error 401:
        detail: Jwt is missing
        type: AuthError
        code: 3
    properties:
      code:
        type: number
        example: 401
      type:
        type: string
        example: AuthError
      detail:
        type: string
        example: Jwt is missing
    required:
      - code
      - type
      - detail
  Error404:
    title: NotFoundError
    type: object
    x-examples:
      example-1:
        code: 4
        type: UserNotFound
        detail: The user could not be found in the DB
    properties:
      code:
        type: number
        example: 404
      type:
        type: string
        example: NotFoundError
      detail:
        type: string
        example: The user could not be found in the DB
    required:
      - code
      - type
      - detail
  Error500:
    title: InternalServerError
    type: object
    x-examples:
      example-1:
        code: 5
        type: ServerError
        detail: Internal Server Error
    properties:
      code:
        type: number
        example: 500
      type:
        type: string
        example: ServerError
      detail:
        type: string
        example: Internal Server Error
    required:
      - code
      - type
      - detail
  GoalandChallenge:
    title: Goal&Challenge Response
    type: object
    description: Goal and challenge response model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
  GoalandChallengeResponse:
    title: Goal&Challenge
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeFiltered:
    title: Goal&ChallengeFiltered
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
  GoalandChallengeFilteredResponse:
    title: Goal&ChallengeFilteredResponse
    type: object
    description: Goal and challenge filtered response model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeModify:
    title: Goal&ChallengeModify
    type: object
    description: Goal and challenge model
    properties:
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      rules:
        type: array
        description: rulesId
        items:
          type: string
  GoalandChallengeCreate:
    title: Goal&ChallengeCreate
    type: object
    description: Goal and challenge model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
  GoalandChallengeCreateResponse:
    title: Goal&ChallengeCreate Response
    type: object
    description: Goal and challenge response model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  CreateSession:
    title: CreateSession
    type: object
    properties:
      userExternalId:
        type: string
        description: u-payments user id
      ttl:
        type: integer
        description: Time to live. Value for the period of time that session should exist
    required:
      - userExternalId
  Session:
    title: Session
    type: object
    properties:
      conomyToken:
        type: string
        description: User conomy token
      refreshToken:
        type: string
        description: Refresh Token
      expiration:
        type: string
        description: 'Expiration time [min]'
      _links:
        type: array
        description: A list of link types and descriptions for token validation. Conomy provides this paramenter
        items:
          $ref: '#/definitions/_links'
  _links:
    title: _links
    type: object
    description: A list of link types and descriptions.
    properties:
      rel:
        type: string
        description: This describes the type of links
      route:
        type: string
        description: This property contais a full-qualified URL
      method:
        type: string
        description: The HTTP method that should be used
      targetSchema:
        type: string
        description: 'For requests, this is a URL representing the schema that the response should conform to.'
      schema:
        type: string
        description: 'For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.'
    required:
      - rel
      - route
      - method
  RefreshToken:
    title: RefreshToken
    type: object
    description: ''
    properties:
      userExternalUuid:
        type: string
        description: u-payments user id
      conomyToken:
        type: string
        description: User conomy token
      ttl:
        type: string
        description: Time to live. Value for the period of time that session should exist
    required:
      - userExternalUuid
      - conomyToken
      - ttl
  ValidatedSession:
    title: ValidatedSession
    type: object
    properties:
      userExternalUuid:
        type: string
      message:
        type: string
    required:
      - userExternalUuid
      - message
consumes:
  - application/json
responses: {}
