swagger: '2.0'
info:
  title: "Conomy Developers \U0001F4D9 API Reference"
  description: "This is **Conomy Developers**, the portal where you cand find our API Reference with everything you need to use our APIs. We've tried to build a friendly documentation, if you have any doubt please don't hesitate to reach us out at hola@conomyhq.com. We hope you enjoy this site \U0001F44B.\n\nCurrently we have a microservices backend architecture serving for different purposes. You can find their description in the left menu with the detail of each of their specific endpoints.\n\n**Addresses Service**: Users addresses information, you can fetch address data with its specific user id, bringing parameters like region, commune, first_address and an optional description address.\n\n**Cards Service**: Cards information, search and match any card that is owned by specific user id and respond an array of card objects. \n\n**Transactions Service**: This service provides transactions information, you can fetch transaction data with its specific card id, bringing parameters like title, amount, currency among others.\n\n**Users Service**: This service provides users information, with its user id you can get all the user data and also make some changes to its personal information.\n\n**Authorization Service**: This service lets the user to have its private pin, letting him take control over his personal data with a configured pin pass. \n\n**Others...*\n\nhttps://giphy.com/gifs/barkpost-barkpost-happy-wednesday-working-like-a-dog-eYilisUwipOEM"
  version: 1.0.0
  contact:
    email: hola@conomyhq.com
    name: Conomy app
host: api.conomy.app
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  apitoken:
    type: apiKey
    name: x-api-key
    in: header
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /v1/transaction:
    post:
      tags:
        - transaction
      summary: Post a new transaction to apply business rules
      operationId: postTransaction
      description: Apply business rules to every transaction
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-switch-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Transaction
          description: Transaction to apply business rules
          schema:
            $ref: '#/definitions/Transaction'
      security:
        - apitoken: []
      responses:
        '201':
          description: Transaction created
          schema:
            $ref: '#/definitions/Transaction'
        '400':
          description: invalid input
        '401':
          description: invalid token
        '409':
          description: an existing item already exists
        '422':
          description: invalid Json
        '500':
          description: internal error
  '/card/{card_id}':
    get:
      tags:
        - Card
      description: 'The Cards service provides information about user''s cards, and the endpoint /cards/{card_id} with the method GET fetch the information about a specific id.'
      summary: "Get a specific card by card ID \U0001F4B3"
      operationId: getCardId
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - type: string
          name: card_id
          in: path
          required: true
          description: card ID
      security:
        - apitoken: []
      responses:
        '200':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  /card:
    post:
      tags:
        - Card
      summary: "Create a card and add to a specific user \U0001F45B"
      operationId: createCard
      description: 'The Cards service delivers cards data. The /cards endpoint with POST method adds a card owned by a specific user id and save it on an array of card objects, which includes all its cards attributes.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Card
          description: Card schema
          schema:
            $ref: '#/definitions/CardCreate'
      security:
        - apitoken: []
      responses:
        '201':
          description: Card information
          schema:
            $ref: '#/definitions/CardCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
  '/conomyCard/{conomycard_id}':
    get:
      summary: "Get all the information of a specific Conomy Card \U0001F4B3"
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: getConomyCardId
      description: The Conomy Card service provides all the data about Conomy Cards and the GET method fetch a specific card by its id.
      tags:
        - Conomy Card
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
    parameters:
      - type: string
        name: conomycard_id
        in: path
        required: true
        description: Conomy card ID
  /conomyCard:
    parameters: []
    post:
      summary: "Create a new Conomy Card \U0001F4B3"
      operationId: postConomyCard
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCardCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: The Conomy Card service host all the data about Conomy Cards and the POST method creates a new Conomy Card based on the attributes provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ConomyCardCreate'
          description: Request are all the attributes but active default payment card and description
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
  /user:
    post:
      tags:
        - User
      summary: "Create a new user in the db \U0001F929"
      operationId: addUser
      description: 'The Users services provides user information. The /users endpoint with a POST method register a new user in the db with its personal information such as name, last name, national id, phone among other data.'
      consumes:
        - application/json
      security:
        - apitoken: []
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/UserCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
  '/user/{user_id}':
    get:
      tags:
        - User
      summary: "Get a specific user \U0001F60A"
      operationId: getUser
      description: 'The Users service provides user information. The /users/{id} endpoint with a GET method fetch a specific user by its user id from the db with its personal information such as name, last name, national id, phone among other data.'
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: search results matching criteria
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      security:
        - apitoken: []
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
        description: User ID
  /transaction:
    post:
      summary: "Transaction switch \U0001F511"
      operationId: transactionSwitch
      description: The Switch service receive transaction's information. The /transaction endpoint with a POST method register every transaction.
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-switch-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/SwitchTransaction'
          x-examples: {}
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/SwitchTransactionResponse'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Transaction Switch
      security:
        - apitoken: []
    parameters: []
  /v1/goals-challenges/composite:
    post:
      summary: Create goal or challenge
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/GoalandChallengeCreateResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: post-v1-goals
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallengeCreate'
          description: Goal & challenge schema
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a POST method register a new goal or challenge in the db with  a goal and challenge model field.
      x-internal: true
    parameters: []
    get:
      summary: Get goals and challenges by user_id
      operationId: get-v1-goals-challenges
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalschallenges:
                $ref: '#/definitions/GoalandChallenge'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a GET method fetch a goals and challenges by user_upayments_uuid
      parameters:
        - type: string
          in: query
          name: user_upayments_uuid
          description: upayments user identifier
      tags:
        - Goals & Challenges
      x-internal: true
  /v1/goals-challenges/composite/challenges:
    get:
      summary: Get Active challenges in app
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalschallenges:
                $ref: '#/definitions/GoalandChallenge'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-active-challenges
      x-internal: true
    parameters: []
  /v1/goals-challenges/composite/rules:
    get:
      summary: Get Actives rules in app
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              rules:
                $ref: '#/definitions/Rule'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-active-rules
      x-internal: true
    parameters: []
  '/v1/goals-challenges/composite/{id}':
    get:
      summary: Get goal or challenge by id
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-goals-challenge
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a GET method fetch a specific goal or challenge by id'
      parameters: []
      tags:
        - Goals & Challenges
      x-internal: true
    put:
      summary: Modify goal or challenge by id
      operationId: put-v1-goals-challenge
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method updates a goal or challenge values by id'
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallenge'
      tags:
        - Goals & Challenges
      x-internal: true
    parameters:
      - type: string
        name: id
        in: path
        required: true
    delete:
      summary: Delete goal or challenge by id
      operationId: delete-v1-goals-challenges-id
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error404'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method deletes a goal or challenge values by id'
      tags:
        - Goals & Challenges
      x-internal: true
  '/v1/goals-challenges/composite/{id}/confirm':
    parameters:
      - type: string
        name: id
        in: path
        required: true
        description: Goal or Challenge identifier
    post:
      summary: Complete the setup of an objective or challenge
      operationId: post-v1-goals-challenges-id-confirm
      x-google-backend:
        address: 'https://gc-composite-service-conomy-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id}/confirm endpoint with a POST method confirms the goal or challenge attempt.'
      tags:
        - Goals & Challenges
  /api/auth:
    parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/GetTokenBody'
        description: This request require an user id from uapyment and and estimated time to live
      - type: string
        name: X-Application-Id
        in: header
        required: true
        description: App id
    post:
      summary: Create a new jwt token to interactuate with conomy services
      operationId: post-v1-auth
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GetTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'With this method a new jwt token will be created in the conomy authentication service, along with this will come a refresh token that will serve to renew said token and also an expiration date in unix timestamp format, in addition to this the useful links will be referenced of the api'
      tags:
        - Auth
  /api/auth/validate:
    parameters:
      - type: string
        name: X-Application-Id
        in: header
        required: true
        description: App id
    get:
      security:
        - Bearer: []
      summary: Check if the token is valid or not
      operationId: get-v1-auth-validate
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ValidateTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      tags:
        - Auth
  /api/auth/refresh:
    parameters:
      - type: string
        name: X-Application-Id
        in: header
        required: true
        description: App id
      - type: string
        name: X-Refresh-Token
        in: header
        required: true
        description: Refresh token id
      - in: body
        name: body
        schema:
          type: object
          properties:
            ttl:
              type: integer
              description: time to live until token expire, unix timestamp
              example: 1651007906
          
        description: This request require an user id from uapyment and and estimated time to live
    post:
      summary: Refresh a jwt token
      operationId: post-v1-auth-refresh
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RefreshTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      tags:
        - Auth
  /api/v1/content/blogpost:
    get:
      summary: Get list of blogs
      tags:
        - Blog
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BlogList'
          examples:
            example-1:
              total_count: 2
              total_pages: 1
              current_page: 1
              count: 2
              data:
                - id: blogpost-674209
                  slug: transaccion_que_no_ocurrio
                  title: Transacción que no ocurrió
                  writer:
                    - type: internal
                      dataUrl: /api/v1/content/owner/owner-338894
                  content: |
                    <p>Mi nombre es Pablo, soy Ingeniero Comercial, tengo 31 años y soy cofundador de Conomy. Cuando le digo a la gente mi profesión, las personas tienden a imaginar que los problemas financieros -producidos por desorden o desconocimiento- son ajenos a mí y a los que estudiaron finanzas o algo similar, pero lamentablemente no es así.</p>

                    <p>Les quiero contar una historia <strong>-REAL-</strong> que empezó cuando estaba en mis primeros años de universidad, pero que terminó recién el año pasado.</p>

                    <p>Era muy normal que en algunas semanas del año, dentro del campus de la universidad existieran stands de bancos que invitaban a los estudiantes a abrir una cuenta con ellos. Por lo general estas cuentas eran gratuitas -o eso te prometían- hasta los 30 años (se podrán imaginar, que por esto la historia recién terminó el año pasado).&nbsp;</p>

                    <p>En esta ocasión había un banco -que por respeto prefiero no decir el nombre- que ofrecía además de una cuenta gratuita hasta cumplir 30 años -clásico-, la camiseta de la selección de Alexis Sanchez, Arturo Vidal o Claudio Bravo de regalo. ¡Tremenda promoción! Pensándolo ahora, es muy bueno para ser cierto….</p>

                    <p>Y bueno, nunca he sido tan fanático del fútbol y ya tenía cuenta en otro banco, pero puntualmente ese mes era septiembre y se venía el 18. En esas fechas los gastos por lo general suben y como buen estudiante estaba medio corto de lucas. Entonces, se me encendió la ampolleta y pensé: “puedo sacar esta cuenta gratis y vender la camiseta, así gano plata y después cierro la cuenta antes de los 30. La polera me sale gratis y la podría vender ¡Increíble oportunidad!”.</p>

                    <p>No vi ningún tipo de problema en mi lógica y me aventuré a abrir la cuenta. Una de las condiciones para que me entregaran mi camiseta de Alexis -me decanté por la del “Niño Maravilla”- era activar las tarjetas de mi nuevo banco. Lo hice, y acto seguido recibí los contratos que tenía que firmar. Ni los miré -craso error-, solo pensaba en el 18 de septiembre que se venía y estampé mi rúbrica en todos los papeles. Me entregaron mis tarjetas y la “7” de Alexis. La publiqué en internet y la vendí la misma semana. Me gané 45 lucas sin hacer nada más que firmar. Negocio redondo, pensé.</p>

                    <p>No volví a pensar en mi nuevo banco hasta que ya estaba cercano a cumplir 30 años, la cuenta iba a pasar a tener un costo mensual y como no me gusta perder plata, fui al banco para cerrarla.</p>

                    <p>Llegué a la sucursal y me atendieron con mucha amabilidad -para qué voy a mentir-. La anfitriona me indicó que debía pasar a atención al cliente para cerrar mi cuenta. Voy y la señorita me dice que hay un problema con cerrar mi cuenta. Según sus palabras, yo debía aproximadamente ¡¡500 mil pesos!!. Quedé como Condorito -¡Plop!-. “¿Cómo? No entiendo nada”, le digo.<br />
                    Le conté la historia de mi cuenta y le aseguré que nunca había usado ninguna tarjeta del banco, nunca realicé una compra, solo activé la cuenta y acepté mi polera de regalo. No hice absolutamente nada más con el banco.</p>

                    <p>La señorita revisó mi historial del banco y me dijo que no tenía más información en detalle anterior al 2016 y mi deuda era anterior a esa fecha. Rarísimo. Siguió revisando y me comentó que toda la deuda es producto de una compra que se hizo por 20 mil pesos y que como nunca se pagó siguió acumulando intereses hasta llegar al tope de mi cuenta -por suerte que mi cuenta solo tenía de cupo 500 mil pesos pensé-. Nunca me supieron en qué gasté esas 20 lucas.</p>

                    <p>Le pregunté si podía hacer algo, acudir a alguna entidad fiscalizadora o algo. Me dijo muy amablemente: “De poder puedes, pero hacer un reclamo por una transacción con una antigüedad mayor a 5 años es difícil que te vaya bien”.</p>

                    <p>Entonces no tenía mucho que hacer. Para cerrar mi cuenta tenía que pagar esa deuda que no correspondía a mis gastos. Creo que es injusto que este mismo banco no se haya dado el tiempo todos los meses desde que abrí mi cuenta, en llamarme para preguntarme si quería un crédito y nadie nunca se molestó en decirme nada sobre esta deuda que seguía creciendo mes a mes.</p>

                    <p>El sistema a veces es injusto, te hace responsable por responsabilidades de otros y no hay más salida que pagar.</p>

                    <p>Las finanzas personales no deberían ser así. Deberían ser fáciles, sin letra chica, que no me ofrezcan una camiseta gratis por la que pensé ganar 45 mil pesos, pero por la que en verdad perdí 455 mil -no considero el valor del dinero en el tiempo para simplificar el análisis-.&nbsp;</p>

                    <p>Fundar Conomy es una de las cosas más desafiantes que he vivido, sin embargo la motivación de poder aportar a las finanzas personales de millones de chilenos y latinoamericanos es aún más grande.</p>

                    <p>Conomy está para ayudarte a que no te pasen cosas como las que me pasaron a mí, a enseñarte a ahorrar, invertir, a ayudarte a mejorar la tasa de interés que te ofrece el banco, a optar por los mejores productos financieros del mercado y todo esto sin tener que hacer un gran esfuerzo.<br />
                    &nbsp;</p>
                  internal:
                    createdAt: '2022-03-15T16:21:25+00:00'
                    deletedAt: ''
                    updatedAt: '2022-03-16T12:04:35+00:00'
                    contentType: blogpost
                    objectTitle: Transacción que no ocurrió
                    workflow_state: saved
                  thumbnail: []
                  headerImage: []
                - id: blogpost-71163
                  slug: tarjetas_credito_pago_minimo
                  title: 'Tarjetas de crédito: Pago mínimo'
                  writer:
                    - type: internal
                      dataUrl: /api/v1/content/owner/owner-338894
                  content: |
                    <p>Desmitificando el pago mínimo, ¿Te conviene?</p>

                    <p>Las tarjetas de crédito son una muy buena herramienta para sacar el mayor provecho de tus finanzas, siempre y cuando, &nbsp;-<em>y aquí es donde esta la letra chica</em>- sepamos cómo funcionan&nbsp;</p>

                    <p>Uno de los grandes problemas de las personas que usan tarjetas de crédito es producto del pago mínimo: ¿Qué es? ¿Cómo funciona? ¿Es favorable para el que lo usa? En este artículo les contaremos todos los detalles sobre esta modalidad, si te conviene o no y sus consecuencias.</p>

                    <p>Las tarjetas de crédito -independiente de la marca y del banco de emisión- nos entregan la opción del “pago mínimo” cuando nos enfrentamos al pago de nuestras cartolas mensuales y claro, puede sonar altamente atractivo cancelar solo una fracción del monto que debemos, pero ¿Cómo afecta esto en nuestras finanzas?</p>

                    <p>El pago mínimo generalmente corresponde al 10% de la deuda total del mes, entonces, cuando elegimos este tipo de pago, no estamos pagando toda nuestra deuda -lógicamente- y de esta manera el monto que debíamos sigue acumulando intereses. Es decir, cuando usas esta opción de tu tarjeta de crédito, lo que haces es aumentar el monto total que finalmente tendrás que pagar.</p>

                    <p><em>EXPLICANDO CON PERAS, MANZANAS Y CONOMY</em></p>

                    <p><em>Imaginemos que tu deuda total en la tarjeta de crédito es de $100.000 pesos y que en marzo la cuota que debes pagar es de $30.000 pesos. En ese caso, el pago mínimo (siguiendo la lógica del 10% del total adeudado) sería aproximadamente $3.000. Ahora, si pagamos solo $3.000, pero nuestra deuda total era $30.000, hay $27.000 de deuda que no se pagaron en marzo y en consecuencia seguirán acumulando intereses. Como los intereses son un % del total que las personas deben, mientras más debes más pagas en intereses.&nbsp;</em></p>

                    <p>Además de aumentar -<em>o no disminuir, mejor dicho</em>- el monto total adeudado al costear el pago mínimo de tu tarjeta de crédito, hay otro concepto perjudicial en esta misma acción: La tasa de intereses que te cobran es diferente y… <strong>¡Claro que es más alta!</strong></p>

                    <p>Cuando no pagas el monto facturado total de tu tarjeta de crédito, el interés cambia y pasan a cobrarte el llamado “interés rotativo” a cambio del interés que deberías pagar. Este interés rotativo siempre es más alto que el interés por cuotas y suele estar cerca del máximo convencional, que es el monto máximo permitido por la ley.</p>

                    <p>RESUMIMOS Y RECOMENDAMOS</p>

                    <p>Cuando optas por el pago mínimo, estás comprometiéndote a pagar más a tu banco por la plata que ya debías, por dos conceptos: (1) mayor monto sobre el que se calculan los intereses a pagar y (2) una tasa de interés más alta producto del interés rotativo.</p>

                    <p>Hay que dejar claro que el pago mínimo no siempre es algo malo. Hacerlo sirve para que el crédito siga vigente y no inhabilitar la tarjeta, y además, funciona también para que no te cobren el interés por mora, que es adicional al rotativo. Cuando no tienes otra opción de pago, siempre es mejor pagar el monto mínimo que pagar nada.</p>

                    <p>Si frecuentemente debes hacer efectivo el pago mínimo y no te alcanza para pagar el monto completo, te recomendamos dos cosas: (1) cada vez que puedas abonar a tu tarjeta y de esta forma estarás disminuyendo el monto total de deuda y en consecuencia los intereses totales a pagar. Por otra parte, (2) trata de acomodar tus gastos a montos que si puedas pagar, y con la función de presupuesto dentro de Conomy app puedes ordenar tus gastos con un par de clics, y la misma aplicación te ayudará a saber cuánto puedes gastar para cumplir tus objetivos: Ya sea el pagar tu tarjeta de crédito, ahorrar para unas vacaciones o poder enfocarse en el ansiado pie del departamento que tanto buscas.</p>

                    <p>Espero que este artículo te haya sido útil. Si conoces a alguien que le pueda servir, recomiéndale nuestro blog y no dudes en compartir este y todos los demás textos con quien tú quieras.</p>

                    <p>Pablo Acuña, CEO Conomy<br />
                    &nbsp;</p>
                  internal:
                    createdAt: '2022-03-15T16:33:03+00:00'
                    deletedAt: ''
                    updatedAt: '2022-03-16T12:05:44+00:00'
                    contentType: blogpost
                    objectTitle: 'Tarjetas de crédito: Pago mínimo'
                    workflow_state: saved
                  thumbnail: []
                  headerImage: []
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
      operationId: get-api-v1-content-blogpost
      description: 'This service allows us to obtain a list of all the blogs that are created on the platform. '
      parameters:
        - type: string
          in: header
          name: X-AUTH-TOKEN
          description: Personal Auth token generated for user in Headless CMS application
          required: true
  '/api/v1/content/blogpost/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get blog post object
      tags:
        - Blog
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BlogPostObject'
          examples:
            example:
              id: blogpost-674209
              internal:
                contentType: blogpost
                createdAt: '2022-03-15T16:21:25+00:00'
                updatedAt: '2022-03-16T12:05:15+00:00'
                deletedAt: ''
                workflow_state: saved
                objectTitle: ¿Gastar o Ahorrar? - Conomy te enseña
              slug: tarjetas_credito_pago_minimo
              title: 'Tarjetas de crédito: Pago mínimo'
              writer:
                - dataUrl: /api/v1/content/owner/owner-338894
                  type: internal
              content: |
                <p>Desmitificando el pago mínimo, ¿Te conviene?</p>

                <p>Las tarjetas de crédito son una muy buena herramienta para sacar el mayor provecho de tus finanzas, siempre y cuando, &nbsp;-<em>y aquí es donde esta la letra chica</em>- sepamos cómo funcionan&nbsp;</p>

                <p>Uno de los grandes problemas de las personas que usan tarjetas de crédito es producto del pago mínimo: ¿Qué es? ¿Cómo funciona? ¿Es favorable para el que lo usa? En este artículo les contaremos todos los detalles sobre esta modalidad, si te conviene o no y sus consecuencias.</p>

                <p>Las tarjetas de crédito -independiente de la marca y del banco de emisión- nos entregan la opción del “pago mínimo” cuando nos enfrentamos al pago de nuestras cartolas mensuales y claro, puede sonar altamente atractivo cancelar solo una fracción del monto que debemos, pero ¿Cómo afecta esto en nuestras finanzas?</p>

                <p>El pago mínimo generalmente corresponde al 10% de la deuda total del mes, entonces, cuando elegimos este tipo de pago, no estamos pagando toda nuestra deuda -lógicamente- y de esta manera el monto que debíamos sigue acumulando intereses. Es decir, cuando usas esta opción de tu tarjeta de crédito, lo que haces es aumentar el monto total que finalmente tendrás que pagar.</p>

                <p><em>EXPLICANDO CON PERAS, MANZANAS Y CONOMY</em></p>

                <p><em>Imaginemos que tu deuda total en la tarjeta de crédito es de $100.000 pesos y que en marzo la cuota que debes pagar es de $30.000 pesos. En ese caso, el pago mínimo (siguiendo la lógica del 10% del total adeudado) sería aproximadamente $3.000. Ahora, si pagamos solo $3.000, pero nuestra deuda total era $30.000, hay $27.000 de deuda que no se pagaron en marzo y en consecuencia seguirán acumulando intereses. Como los intereses son un % del total que las personas deben, mientras más debes más pagas en intereses.&nbsp;</em></p>

                <p>Además de aumentar -<em>o no disminuir, mejor dicho</em>- el monto total adeudado al costear el pago mínimo de tu tarjeta de crédito, hay otro concepto perjudicial en esta misma acción: La tasa de intereses que te cobran es diferente y… <strong>¡Claro que es más alta!</strong></p>

                <p>Cuando no pagas el monto facturado total de tu tarjeta de crédito, el interés cambia y pasan a cobrarte el llamado “interés rotativo” a cambio del interés que deberías pagar. Este interés rotativo siempre es más alto que el interés por cuotas y suele estar cerca del máximo convencional, que es el monto máximo permitido por la ley.</p>

                <p>RESUMIMOS Y RECOMENDAMOS</p>

                <p>Cuando optas por el pago mínimo, estás comprometiéndote a pagar más a tu banco por la plata que ya debías, por dos conceptos: (1) mayor monto sobre el que se calculan los intereses a pagar y (2) una tasa de interés más alta producto del interés rotativo.</p>

                <p>Hay que dejar claro que el pago mínimo no siempre es algo malo. Hacerlo sirve para que el crédito siga vigente y no inhabilitar la tarjeta, y además, funciona también para que no te cobren el interés por mora, que es adicional al rotativo. Cuando no tienes otra opción de pago, siempre es mejor pagar el monto mínimo que pagar nada.</p>

                <p>Si frecuentemente debes hacer efectivo el pago mínimo y no te alcanza para pagar el monto completo, te recomendamos dos cosas: (1) cada vez que puedas abonar a tu tarjeta y de esta forma estarás disminuyendo el monto total de deuda y en consecuencia los intereses totales a pagar. Por otra parte, (2) trata de acomodar tus gastos a montos que si puedas pagar, y con la función de presupuesto dentro de Conomy app puedes ordenar tus gastos con un par de clics, y la misma aplicación te ayudará a saber cuánto puedes gastar para cumplir tus objetivos: Ya sea el pagar tu tarjeta de crédito, ahorrar para unas vacaciones o poder enfocarse en el ansiado pie del departamento que tanto buscas.</p>

                <p>Espero que este artículo te haya sido útil. Si conoces a alguien que le pueda servir, recomiéndale nuestro blog y no dudes en compartir este y todos los demás textos con quien tú quieras.</p>

                <p>Pablo Acuña, CEO Conomy<br />
                &nbsp;</p>
              thumbnail:
                - dataUrl: /api/v1/content/_media/_media-0f69723e-b789-475e-ac88-ab1bd771c945
                  type: internal
              headerImage:
                - dataUrl: /api/v1/content/_media/_media-0f69723e-b789-475e-ac88-ab1bd771c945
                  type: internal
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
      operationId: get-api-v1-content-blogpost-id
      description: |
        The Get blog post object service will allow us to obtain all the necessary information about a specific blog, through its {id}.
      parameters:
        - type: string
          in: header
          name: X-AUTH-TOKEN
          description: Personal Auth token generated for user in Headless CMS application
  '/api/v1/content/owner/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Owner
      tags:
        - Blog
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OwnerBlog'
          examples:
            example-1:
              id: owner-338894
              name: Taladro
              role: Frontend engineer
              internal:
                createdAt: '2022-03-16T12:02:24+00:00'
                deletedAt: ''
                updatedAt: '2022-03-16T12:03:20+00:00'
                contentType: owner
                objectTitle: ''
                workflow_state: saved
              last_name: Táctico
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
      operationId: get-api-v1-content-owner-id
      description: 'Get Owner will give us the information of the person who has created a blog through the use of a unique {id}. '
      parameters:
        - type: string
          in: header
          name: X-AUTH-TOKEN
          description: Personal Auth token generated for user in Headless CMS application
  '/api/v1/content/_media/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get media
      tags:
        - Blog
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MediaBlog'
          examples:
            example:
              id: _media-698d20aa-193a-47b3-be4d-550c1aab47e7
              extension: png
              fileName: example_image.png
              mimeType: image/png
              size: 87258
              type: image
              source: disk
              externalId: ''
              url: /image/0x0/_media-698d20aa-193a-47b3-be4d-550c1aab47e7.png
              height: 517
              width: 925
              internal:
                contentType: _media
                createdAt: '2022-04-20T18:31:28+00:00'
                updatedAt: '2022-04-20T18:31:28+00:00'
                deletedAt: ''
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
      operationId: get-api-v1-content-_media-id
      description: |
        The _media service will allow us to access and obtain the thumbnail and header images of the owners' accounts. It is necessary to enter the {id} of the image, while hydration defaults to 0 and only accepts one level of hydration. 
      parameters:
        - type: string
          in: query
          name: hydrate
          description: hydrate the relations with an object
          minLength: 0
          maxLength: 1
          default: '0'
        - type: string
          in: header
          name: X-AUTH-TOKEN
          description: Personal Auth token generated for user in Headless CMS application
definitions:
  Transaction:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
    required:
      - _id
  Token:
    type: object
    description: Jwt token format used by conomy
    properties:
      upaymentsId:
        description: upayment user idientifier
        type: string
        example: 52SNfMWOktWVxsfyks6felsafAU24
      appId:
        description: app idientifier
        type: string
        example: 123456
      exp:
        description: Unix timestamp
        type: integer
        example: 1651007906
    required:
      - upaymentsId
      - appId
      - exp
  GetTokenBody:
    type: object
    description: Body schema to fetch a jwt token
    properties:
      user_upayments_uuid:
        type: string
        description: Upayment user id who is applying to the token
        example: "52SNfMWOktWVxsfyks6felsafAU24"
      ttl:
        type: integer
        description: Duration/Date until expire
        example: 1651007906

    required:
      - user_upayments_uuid
      - ttl

  GetTokenResponse:
    type: object
    description: Response schema for a get token method
    properties:
      conomyToken:
        type: string
        description: Conomy jwt token
        example: "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"
      refreshToken:
        type: string
        description: refresh jwt token
        example: "eyJhbGciOiJIUzI1NiIsInR5c.eyJzdWIiOFt2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpM"
      expiration:
        description: Unix timestamp
        type: string
        example: 1651007906
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - conomyToken
      - refreshToken
      - expiration
      - _links
  RefreshTokenResponse:
    type: object
    description: Response schema for a get token method
    properties:
      conomyToken:
        type: string
        description: Conomy jwt token
        example: "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"
      refreshToken:
        type: string
        description: refresh jwt token
        example: "eyJhbGciOiJIUzI1NiIsInR5c.eyJzdWIiOFt2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpM"
      expiration:
        description: Unix timestamp
        type: string
        example: 1651007906
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - conomyToken
      - refreshToken
      - expiration
      - _links
  ValidateTokenResponse:
    type: object
    description: Response schema to a response when validating a token
    properties:
      message:
        type: string
        example: valid token
      userId:
        type: string
        format: uuid
        example: 52SNfMWOktWVxsfyks6felsafAU24
      expiration:
        description: Unix timestamp
        type: string
        example: 1651007906
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - conomyToken
      - refreshToken
      - expiration
      - _links
  Address:
    type: object
    description: This is a model to represent user address
    properties:
      id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      user_id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
      street:
        type: string
        example: Los Pillines
      street_number:
        type: string
      optional_address:
        type: string
        example: '340'
        description: Like an apartment number
    required:
      - id
      - user_id
      - administrative_area_level_1
      - administrative_area_level_2
      - street
      - optional_address
  AddressModify:
    type: object
    properties:
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  AddressCreate:
    type: object
    properties:
      user_id:
        type: string
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  Rule:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
      processes:
        type: array
        description: Processes are atomic operations that when accomplished in sequence define and apply the rule as a whole
        items:
          $ref: '#/definitions/RuleProcess'
    required:
      - id
      - type
      - description
      - processes
  RuleFiltered:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    title: ''
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
    required:
      - id
      - type
      - description
  RuleProcess:
    type: object
    description: 'Atomic process definition, it applies one simple operation of the rule. It follows a simple operation syntax, left variable + operation + right variable.'
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
      description:
        type: string
        description: Rule description for human reading
      leftVariable:
        type: string
      rightVariable:
        type: string
      operation:
        type: string
    required:
      - id
      - type
      - description
  Card:
    type: object
    x-examples: {}
    properties:
      id:
        type: string
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        description: user conomy identifier
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
    required:
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  CardCreate:
    type: object
    x-examples:
      example-1:
        id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        card_issuer: BancoDeChile
        card_brand: MasterCard
        holder_card_name: Pablo insulza
        card_number: '************1234'
        currency: CLP
        is_active: false
        created_at: '2017-07-21T17:32:28Z'
        updated_at: '2017-07-21T17:32:28Z'
        color: string
        card_account_type: cuenta vista
        description: {}
    properties:
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        description: User conomy id
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
    required:
      - externalId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
  ConomyCard:
    type: object
    title: Conomy Card
    description: ''
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      description:
        type: string
    required:
      - id
      - userId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  ConomyCardCreate:
    type: object
    title: Conomy Card Create
    description: ''
    properties:
      externalId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        example: BancoDeChile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      description:
        type: string
    required:
      - externalId
      - cardBrand
      - cardholderName
      - pan
      - currency
  User:
    type: object
    description: Conomy User Model
    properties:
      id:
        type: string
        example: b92e761a-279a-11ec-9621-0242ac130002
      userExternalId:
        type: string
        description: User u-payments uuid
      name:
        type: string
        example: Mauricio
        description: User name
      nickName:
        type: string
        example: JFT
        description: user nickname
      lastName:
        type: string
        example: Gatica
        description: user last name
      email:
        type: string
        description: user email
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW '
      phone:
        type: string
        example: '+5691238159123'
        description: phone number
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      career:
        type: string
        description: User career/ocuppation
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
    required:
      - id
      - userExternalId
      - name
      - lastName
      - email
      - maritalStatus
      - phone
      - dni
      - career
      - address
      - status
      - contractId
  UserModify:
    description: ''
    type: object
    x-examples:
      example-1:
        user_id: b92e761a-279a-11ec-9621-0242ac130002
        name: Mauricio
        nick_name: JFT
        last_name: Gatica
        rut: 12.612.412-2
        phone: '+5691238159123'
        account: user
        password_pin: '2424'
        profession: string
        gender: string
        civil_status: string
        email: string
    properties:
      name:
        type: string
        description: User name
      lastName:
        type: string
        description: User last name
      email:
        type: string
        minLength: 1
        description: user email
      nickName:
        type: string
        minLength: 1
        description: user nick name
      phone:
        type: string
        minLength: 1
        description: phone number
      career:
        type: string
        minLength: 1
        description: user career/ocuppation
      gender:
        type: string
        minLength: 1
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        minLength: 1
        description: 'User civil status. MARRIED, SINGLE, DIVORCED, WIDOW'
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
  UserCreate:
    type: object
    properties:
      userExternalId:
        type: string
        description: user u-payments uuid
      name:
        type: string
        example: Mauricio
        description: user name
      lastName:
        type: string
        example: Gatica
        description: user last name
      nickName:
        type: string
        description: User nickname
      email:
        type: string
        description: user email
      dni:
        type: string
        example: 12.612.412-2
        description: Unique country identifier
      phone:
        type: string
        description: User phone number
      career:
        type: string
        description: user career/ocuppation
      gender:
        type: string
        description: 'FEMALE, MALE, OTHER'
      maritalStatus:
        type: string
        description: 'MARRIED, SINGLE, DIVORCED, WIDOW'
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
    required:
      - userExternalId
  SwitchTransaction:
    description: ''
    type: object
    x-examples: {}
    properties:
      identifier:
        type: string
        minLength: 1
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
    required:
      - identifier
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
  SwitchTransactionResponse:
    description: ''
    type: object
    properties:
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
      links:
        type: array
        items:
          properties: {}
    required:
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
      - links
    x-examples:
      example-1:
        idConomyCardReferenceToken: asd
        amount: as
        currency: clp
        transactionId: iasd
        links: []
  Error400:
    title: BadRequestError
    type: object
    x-examples: {}
    properties:
      code:
        type: number
        example: 2
      type:
        type: string
        example: GenericError
      detail:
        type: string
        example: A required parameter for this API operation is invalid or has not been provided
    required:
      - code
      - type
      - detail
    description: ''
  Error401:
    title: UnauthorizedError
    type: object
    x-examples:
      Unauthorized Error 401:
        detail: Jwt is missing
        type: AuthError
        code: 3
    properties:
      code:
        type: number
        example: 401
      type:
        type: string
        example: AuthError
      detail:
        type: string
        example: Jwt is missing
    required:
      - code
      - type
      - detail
  Error404:
    title: NotFoundError
    type: object
    x-examples:
      example-1:
        code: 4
        type: UserNotFound
        detail: The user could not be found in the DB
    properties:
      code:
        type: number
        example: 404
      type:
        type: string
        example: NotFoundError
      detail:
        type: string
        example: The user could not be found in the DB
    required:
      - code
      - type
      - detail
  Error500:
    title: InternalServerError
    type: object
    x-examples:
      example-1:
        code: 5
        type: ServerError
        detail: Internal Server Error
    properties:
      code:
        type: number
        example: 500
      type:
        type: string
        example: ServerError
      detail:
        type: string
        example: Internal Server Error
    required:
      - code
      - type
      - detail
  GoalandChallenge:
    title: Goal&Challenge Response
    type: object
    description: Goal and challenge response model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
  GoalandChallengeResponse:
    title: Goal&Challenge
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      created_at:
        type: string
      updated_at:
        type: string
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeFiltered:
    title: Goal&ChallengeFiltered
    type: object
    description: Goal and challenge model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
  GoalandChallengeFilteredResponse:
    title: Goal&ChallengeFilteredResponse
    type: object
    description: Goal and challenge filtered response model
    properties:
      id:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleFiltered'
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      currentAmount:
        type: number
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  GoalandChallengeModify:
    title: Goal&ChallengeModify
    type: object
    description: Goal and challenge model
    properties:
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      rules:
        type: array
        description: rulesId
        items:
          type: string
  GoalandChallengeCreate:
    title: Goal&ChallengeCreate
    type: object
    description: Goal and challenge model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
  GoalandChallengeCreateResponse:
    title: Goal&ChallengeCreate Response
    type: object
    description: Goal and challenge response model
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
  _links:
    title: _links
    type: object
    description: A list of link types and descriptions.
    properties:
      rel:
        type: string
        description: This describes the type of links
      route:
        type: string
        description: This property contais a full-qualified URL
      method:
        type: string
        description: The HTTP method that should be used
      targetSchema:
        type: string
        description: 'For requests, this is a URL representing the schema that the response should conform to.'
      schema:
        type: string
        description: 'For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.'
    required:
      - rel
      - route
      - method
  BlogList:
    type: object
    x-examples:
      example:
        total_count: 2
        total_pages: 1
        current_page: 1
        count: 2
        data:
          - id: blogpost-674209
            slug: transaccion_que_no_ocurrio
            title: Transacción que no ocurrió
            writer:
              - type: internal
                dataUrl: /api/v1/content/owner/owner-338894
            content: |
              <p>Mi nombre es Pablo, soy Ingeniero Comercial, tengo 31 años y soy cofundador de Conomy. Cuando le digo a la gente mi profesión, las personas tienden a imaginar que los problemas financieros -producidos por desorden o desconocimiento- son ajenos a mí y a los que estudiaron finanzas o algo similar, pero lamentablemente no es así.</p>

              <p>Les quiero contar una historia <strong>-REAL-</strong> que empezó cuando estaba en mis primeros años de universidad, pero que terminó recién el año pasado.</p>

              <p>Era muy normal que en algunas semanas del año, dentro del campus de la universidad existieran stands de bancos que invitaban a los estudiantes a abrir una cuenta con ellos. Por lo general estas cuentas eran gratuitas -o eso te prometían- hasta los 30 años (se podrán imaginar, que por esto la historia recién terminó el año pasado).&nbsp;</p>

              <p>En esta ocasión había un banco -que por respeto prefiero no decir el nombre- que ofrecía además de una cuenta gratuita hasta cumplir 30 años -clásico-, la camiseta de la selección de Alexis Sanchez, Arturo Vidal o Claudio Bravo de regalo. ¡Tremenda promoción! Pensándolo ahora, es muy bueno para ser cierto….</p>

              <p>Y bueno, nunca he sido tan fanático del fútbol y ya tenía cuenta en otro banco, pero puntualmente ese mes era septiembre y se venía el 18. En esas fechas los gastos por lo general suben y como buen estudiante estaba medio corto de lucas. Entonces, se me encendió la ampolleta y pensé: “puedo sacar esta cuenta gratis y vender la camiseta, así gano plata y después cierro la cuenta antes de los 30. La polera me sale gratis y la podría vender ¡Increíble oportunidad!”.</p>

              <p>No vi ningún tipo de problema en mi lógica y me aventuré a abrir la cuenta. Una de las condiciones para que me entregaran mi camiseta de Alexis -me decanté por la del “Niño Maravilla”- era activar las tarjetas de mi nuevo banco. Lo hice, y acto seguido recibí los contratos que tenía que firmar. Ni los miré -craso error-, solo pensaba en el 18 de septiembre que se venía y estampé mi rúbrica en todos los papeles. Me entregaron mis tarjetas y la “7” de Alexis. La publiqué en internet y la vendí la misma semana. Me gané 45 lucas sin hacer nada más que firmar. Negocio redondo, pensé.</p>

              <p>No volví a pensar en mi nuevo banco hasta que ya estaba cercano a cumplir 30 años, la cuenta iba a pasar a tener un costo mensual y como no me gusta perder plata, fui al banco para cerrarla.</p>

              <p>Llegué a la sucursal y me atendieron con mucha amabilidad -para qué voy a mentir-. La anfitriona me indicó que debía pasar a atención al cliente para cerrar mi cuenta. Voy y la señorita me dice que hay un problema con cerrar mi cuenta. Según sus palabras, yo debía aproximadamente ¡¡500 mil pesos!!. Quedé como Condorito -¡Plop!-. “¿Cómo? No entiendo nada”, le digo.<br />
              Le conté la historia de mi cuenta y le aseguré que nunca había usado ninguna tarjeta del banco, nunca realicé una compra, solo activé la cuenta y acepté mi polera de regalo. No hice absolutamente nada más con el banco.</p>

              <p>La señorita revisó mi historial del banco y me dijo que no tenía más información en detalle anterior al 2016 y mi deuda era anterior a esa fecha. Rarísimo. Siguió revisando y me comentó que toda la deuda es producto de una compra que se hizo por 20 mil pesos y que como nunca se pagó siguió acumulando intereses hasta llegar al tope de mi cuenta -por suerte que mi cuenta solo tenía de cupo 500 mil pesos pensé-. Nunca me supieron en qué gasté esas 20 lucas.</p>

              <p>Le pregunté si podía hacer algo, acudir a alguna entidad fiscalizadora o algo. Me dijo muy amablemente: “De poder puedes, pero hacer un reclamo por una transacción con una antigüedad mayor a 5 años es difícil que te vaya bien”.</p>

              <p>Entonces no tenía mucho que hacer. Para cerrar mi cuenta tenía que pagar esa deuda que no correspondía a mis gastos. Creo que es injusto que este mismo banco no se haya dado el tiempo todos los meses desde que abrí mi cuenta, en llamarme para preguntarme si quería un crédito y nadie nunca se molestó en decirme nada sobre esta deuda que seguía creciendo mes a mes.</p>

              <p>El sistema a veces es injusto, te hace responsable por responsabilidades de otros y no hay más salida que pagar.</p>

              <p>Las finanzas personales no deberían ser así. Deberían ser fáciles, sin letra chica, que no me ofrezcan una camiseta gratis por la que pensé ganar 45 mil pesos, pero por la que en verdad perdí 455 mil -no considero el valor del dinero en el tiempo para simplificar el análisis-.&nbsp;</p>

              <p>Fundar Conomy es una de las cosas más desafiantes que he vivido, sin embargo la motivación de poder aportar a las finanzas personales de millones de chilenos y latinoamericanos es aún más grande.</p>

              <p>Conomy está para ayudarte a que no te pasen cosas como las que me pasaron a mí, a enseñarte a ahorrar, invertir, a ayudarte a mejorar la tasa de interés que te ofrece el banco, a optar por los mejores productos financieros del mercado y todo esto sin tener que hacer un gran esfuerzo.<br />
              &nbsp;</p>
            internal:
              createdAt: '2022-03-15T16:21:25+00:00'
              deletedAt: ''
              updatedAt: '2022-03-16T12:04:35+00:00'
              contentType: blogpost
              objectTitle: Transacción que no ocurrió
              workflow_state: saved
            thumbnail: []
            headerImage: []
          - id: blogpost-71163
            slug: tarjetas_credito_pago_minimo
            title: 'Tarjetas de crédito: Pago mínimo'
            writer:
              - type: internal
                dataUrl: /api/v1/content/owner/owner-338894
            content: |
              <p>Desmitificando el pago mínimo, ¿Te conviene?</p>

              <p>Las tarjetas de crédito son una muy buena herramienta para sacar el mayor provecho de tus finanzas, siempre y cuando, &nbsp;-<em>y aquí es donde esta la letra chica</em>- sepamos cómo funcionan&nbsp;</p>

              <p>Uno de los grandes problemas de las personas que usan tarjetas de crédito es producto del pago mínimo: ¿Qué es? ¿Cómo funciona? ¿Es favorable para el que lo usa? En este artículo les contaremos todos los detalles sobre esta modalidad, si te conviene o no y sus consecuencias.</p>

              <p>Las tarjetas de crédito -independiente de la marca y del banco de emisión- nos entregan la opción del “pago mínimo” cuando nos enfrentamos al pago de nuestras cartolas mensuales y claro, puede sonar altamente atractivo cancelar solo una fracción del monto que debemos, pero ¿Cómo afecta esto en nuestras finanzas?</p>

              <p>El pago mínimo generalmente corresponde al 10% de la deuda total del mes, entonces, cuando elegimos este tipo de pago, no estamos pagando toda nuestra deuda -lógicamente- y de esta manera el monto que debíamos sigue acumulando intereses. Es decir, cuando usas esta opción de tu tarjeta de crédito, lo que haces es aumentar el monto total que finalmente tendrás que pagar.</p>

              <p><em>EXPLICANDO CON PERAS, MANZANAS Y CONOMY</em></p>

              <p><em>Imaginemos que tu deuda total en la tarjeta de crédito es de $100.000 pesos y que en marzo la cuota que debes pagar es de $30.000 pesos. En ese caso, el pago mínimo (siguiendo la lógica del 10% del total adeudado) sería aproximadamente $3.000. Ahora, si pagamos solo $3.000, pero nuestra deuda total era $30.000, hay $27.000 de deuda que no se pagaron en marzo y en consecuencia seguirán acumulando intereses. Como los intereses son un % del total que las personas deben, mientras más debes más pagas en intereses.&nbsp;</em></p>

              <p>Además de aumentar -<em>o no disminuir, mejor dicho</em>- el monto total adeudado al costear el pago mínimo de tu tarjeta de crédito, hay otro concepto perjudicial en esta misma acción: La tasa de intereses que te cobran es diferente y… <strong>¡Claro que es más alta!</strong></p>

              <p>Cuando no pagas el monto facturado total de tu tarjeta de crédito, el interés cambia y pasan a cobrarte el llamado “interés rotativo” a cambio del interés que deberías pagar. Este interés rotativo siempre es más alto que el interés por cuotas y suele estar cerca del máximo convencional, que es el monto máximo permitido por la ley.</p>

              <p>RESUMIMOS Y RECOMENDAMOS</p>

              <p>Cuando optas por el pago mínimo, estás comprometiéndote a pagar más a tu banco por la plata que ya debías, por dos conceptos: (1) mayor monto sobre el que se calculan los intereses a pagar y (2) una tasa de interés más alta producto del interés rotativo.</p>

              <p>Hay que dejar claro que el pago mínimo no siempre es algo malo. Hacerlo sirve para que el crédito siga vigente y no inhabilitar la tarjeta, y además, funciona también para que no te cobren el interés por mora, que es adicional al rotativo. Cuando no tienes otra opción de pago, siempre es mejor pagar el monto mínimo que pagar nada.</p>

              <p>Si frecuentemente debes hacer efectivo el pago mínimo y no te alcanza para pagar el monto completo, te recomendamos dos cosas: (1) cada vez que puedas abonar a tu tarjeta y de esta forma estarás disminuyendo el monto total de deuda y en consecuencia los intereses totales a pagar. Por otra parte, (2) trata de acomodar tus gastos a montos que si puedas pagar, y con la función de presupuesto dentro de Conomy app puedes ordenar tus gastos con un par de clics, y la misma aplicación te ayudará a saber cuánto puedes gastar para cumplir tus objetivos: Ya sea el pagar tu tarjeta de crédito, ahorrar para unas vacaciones o poder enfocarse en el ansiado pie del departamento que tanto buscas.</p>

              <p>Espero que este artículo te haya sido útil. Si conoces a alguien que le pueda servir, recomiéndale nuestro blog y no dudes en compartir este y todos los demás textos con quien tú quieras.</p>

              <p>Pablo Acuña, CEO Conomy<br />
              &nbsp;</p>
            internal:
              createdAt: '2022-03-15T16:33:03+00:00'
              deletedAt: ''
              updatedAt: '2022-03-16T12:05:44+00:00'
              contentType: blogpost
              objectTitle: 'Tarjetas de crédito: Pago mínimo'
              workflow_state: saved
            thumbnail: []
            headerImage: []
    properties:
      total_count:
        type: number
        description: Number of the total pages with blogs
      total_pages:
        type: number
        description: Number of the total pages with blogs
      current_page:
        type: number
        description: Number of the current page
      count:
        type: number
        description: Number of blogs in the current page
      data:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          type: object
          properties:
            id:
              type: string
              minLength: 1
              description: Unique id for each blog
            slug:
              type: string
              minLength: 1
              description: Title slug for urls
            title:
              type: string
              minLength: 1
              description: Blog title
            writer:
              type: array
              uniqueItems: true
              minItems: 1
              description: It contains the data of the blog creator
              items:
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  dataUrl:
                    type: string
                    minLength: 1
                    description: Path containing the blog creator's general data
                required:
                  - type
                  - dataUrl
            content:
              type: string
              minLength: 1
              description: Story that belongs to the blog
            internal:
              type: object
              description: 'Contains general information about the blog. For example, date of publication, deletion, status or type of content.'
              properties:
                createdAt:
                  type: string
                  minLength: 1
                  description: Date of blog creation
                deletedAt:
                  type: string
                  description: Blog deletion date
                updatedAt:
                  type: string
                  minLength: 1
                  description: Date of last modification made to the blog
                contentType:
                  type: string
                  minLength: 1
                objectTitle:
                  type: string
                  minLength: 1
                  description: Blog title
                workflow_state:
                  type: string
                  minLength: 1
                  description: Current blog workflow status
              required:
                - createdAt
                - deletedAt
                - updatedAt
                - contentType
                - objectTitle
                - workflow_state
            thumbnail:
              type: array
              items:
                type: object
                properties:
                  dataUrl:
                    type: string
                    description: Path containing the thumbnail image of the blog's creator
                  type:
                    type: string
            headerImage:
              type: array
              items:
                type: object
                properties:
                  dataUrl:
                    type: string
                    description: Path that contains the header image of the blog
                  type:
                    type: string
          required:
            - id
            - slug
            - title
            - content
    required:
      - total_count
      - total_pages
      - current_page
      - count
      - data
    description: 'Model who represents '
  BlogPostObject:
    description: ''
    type: object
    x-examples:
      example:
        id: blogpost-674209
        slug: transaccion_que_no_ocurrio
        title: Transacción que no ocurrió
        writer:
          - type: internal
            dataUrl: /api/v1/content/owner/owner-338894
        content: |
          <p>Mi nombre es Pablo, soy Ingeniero Comercial, tengo 31 años y soy cofundador de Conomy. Cuando le digo a la gente mi profesión, las personas tienden a imaginar que los problemas financieros -producidos por desorden o desconocimiento- son ajenos a mí y a los que estudiaron finanzas o algo similar, pero lamentablemente no es así.</p>

          <p>Les quiero contar una historia <strong>-REAL-</strong> que empezó cuando estaba en mis primeros años de universidad, pero que terminó recién el año pasado.</p>

          <p>Era muy normal que en algunas semanas del año, dentro del campus de la universidad existieran stands de bancos que invitaban a los estudiantes a abrir una cuenta con ellos. Por lo general estas cuentas eran gratuitas -o eso te prometían- hasta los 30 años (se podrán imaginar, que por esto la historia recién terminó el año pasado).&nbsp;</p>

          <p>En esta ocasión había un banco -que por respeto prefiero no decir el nombre- que ofrecía además de una cuenta gratuita hasta cumplir 30 años -clásico-, la camiseta de la selección de Alexis Sanchez, Arturo Vidal o Claudio Bravo de regalo. ¡Tremenda promoción! Pensándolo ahora, es muy bueno para ser cierto….</p>

          <p>Y bueno, nunca he sido tan fanático del fútbol y ya tenía cuenta en otro banco, pero puntualmente ese mes era septiembre y se venía el 18. En esas fechas los gastos por lo general suben y como buen estudiante estaba medio corto de lucas. Entonces, se me encendió la ampolleta y pensé: “puedo sacar esta cuenta gratis y vender la camiseta, así gano plata y después cierro la cuenta antes de los 30. La polera me sale gratis y la podría vender ¡Increíble oportunidad!”.</p>

          <p>No vi ningún tipo de problema en mi lógica y me aventuré a abrir la cuenta. Una de las condiciones para que me entregaran mi camiseta de Alexis -me decanté por la del “Niño Maravilla”- era activar las tarjetas de mi nuevo banco. Lo hice, y acto seguido recibí los contratos que tenía que firmar. Ni los miré -craso error-, solo pensaba en el 18 de septiembre que se venía y estampé mi rúbrica en todos los papeles. Me entregaron mis tarjetas y la “7” de Alexis. La publiqué en internet y la vendí la misma semana. Me gané 45 lucas sin hacer nada más que firmar. Negocio redondo, pensé.</p>

          <p>No volví a pensar en mi nuevo banco hasta que ya estaba cercano a cumplir 30 años, la cuenta iba a pasar a tener un costo mensual y como no me gusta perder plata, fui al banco para cerrarla.</p>

          <p>Llegué a la sucursal y me atendieron con mucha amabilidad -para qué voy a mentir-. La anfitriona me indicó que debía pasar a atención al cliente para cerrar mi cuenta. Voy y la señorita me dice que hay un problema con cerrar mi cuenta. Según sus palabras, yo debía aproximadamente ¡¡500 mil pesos!!. Quedé como Condorito -¡Plop!-. “¿Cómo? No entiendo nada”, le digo.<br />
          Le conté la historia de mi cuenta y le aseguré que nunca había usado ninguna tarjeta del banco, nunca realicé una compra, solo activé la cuenta y acepté mi polera de regalo. No hice absolutamente nada más con el banco.</p>

          <p>La señorita revisó mi historial del banco y me dijo que no tenía más información en detalle anterior al 2016 y mi deuda era anterior a esa fecha. Rarísimo. Siguió revisando y me comentó que toda la deuda es producto de una compra que se hizo por 20 mil pesos y que como nunca se pagó siguió acumulando intereses hasta llegar al tope de mi cuenta -por suerte que mi cuenta solo tenía de cupo 500 mil pesos pensé-. Nunca me supieron en qué gasté esas 20 lucas.</p>

          <p>Le pregunté si podía hacer algo, acudir a alguna entidad fiscalizadora o algo. Me dijo muy amablemente: “De poder puedes, pero hacer un reclamo por una transacción con una antigüedad mayor a 5 años es difícil que te vaya bien”.</p>

          <p>Entonces no tenía mucho que hacer. Para cerrar mi cuenta tenía que pagar esa deuda que no correspondía a mis gastos. Creo que es injusto que este mismo banco no se haya dado el tiempo todos los meses desde que abrí mi cuenta, en llamarme para preguntarme si quería un crédito y nadie nunca se molestó en decirme nada sobre esta deuda que seguía creciendo mes a mes.</p>

          <p>El sistema a veces es injusto, te hace responsable por responsabilidades de otros y no hay más salida que pagar.</p>

          <p>Las finanzas personales no deberían ser así. Deberían ser fáciles, sin letra chica, que no me ofrezcan una camiseta gratis por la que pensé ganar 45 mil pesos, pero por la que en verdad perdí 455 mil -no considero el valor del dinero en el tiempo para simplificar el análisis-.&nbsp;</p>

          <p>Fundar Conomy es una de las cosas más desafiantes que he vivido, sin embargo la motivación de poder aportar a las finanzas personales de millones de chilenos y latinoamericanos es aún más grande.</p>

          <p>Conomy está para ayudarte a que no te pasen cosas como las que me pasaron a mí, a enseñarte a ahorrar, invertir, a ayudarte a mejorar la tasa de interés que te ofrece el banco, a optar por los mejores productos financieros del mercado y todo esto sin tener que hacer un gran esfuerzo.<br />
          &nbsp;</p>
        internal:
          createdAt: '2022-03-15T16:21:25+00:00'
          deletedAt: ''
          updatedAt: '2022-03-16T12:04:35+00:00'
          contentType: blogpost
          objectTitle: Transacción que no ocurrió
          workflow_state: saved
        thumbnail: []
        headerImage: []
    properties:
      id:
        type: string
        minLength: 1
        description: Unique id for each blog
      slug:
        type: string
        minLength: 1
        description: Title slug for urls
      title:
        type: string
        minLength: 1
        description: Blog title
      writer:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          type: object
          properties:
            type:
              type: string
              minLength: 1
            dataUrl:
              type: string
              minLength: 1
          required:
            - type
            - dataUrl
      content:
        type: string
        minLength: 1
      internal:
        type: object
        description: 'Contains general information about the blog. For example, date of publication, deletion, status or type of content.'
        properties:
          createdAt:
            type: string
            minLength: 1
            description: Date of blog creation
          deletedAt:
            type: string
            description: Blog deletion date
          updatedAt:
            type: string
            minLength: 1
            description: Date of last modification made to the blog
          contentType:
            type: string
            minLength: 1
          objectTitle:
            type: string
            minLength: 1
            description: Blog title
          workflow_state:
            type: string
            minLength: 1
            description: Current blog workflow status
      thumbnail:
        type: array
        description: thumbnail image belonging to the creator of the blog
        items:
          type: object
          properties:
            dataUrl:
              type: string
              description: Path containing the thumbnail image of the blog's creator
            type:
              type: string
          required:
            - dataUrl
            - type
      headerImage:
        type: array
        items:
          type: object
          properties:
            dataUrl:
              type: string
              description: Path that contains the header image of the blog
            type:
              type: string
          required:
            - dataUrl
            - type
    required:
      - id
      - slug
      - title
      - content
      - internal
  OwnerBlog:
    description: ''
    type: object
    x-examples:
      example-1:
        id: owner-338894
        name: Pablo
        role: CEO
        internal:
          createdAt: '2022-03-16T12:02:24+00:00'
          deletedAt: ''
          updatedAt: '2022-03-16T12:03:20+00:00'
          contentType: owner
          objectTitle: ''
          workflow_state: saved
        last_name: Acuña
    properties:
      id:
        type: string
        minLength: 1
        description: Unique id belonging to a single Owner
      name:
        type: string
        minLength: 1
        description: owner's name
      role:
        type: string
        minLength: 1
        description: Role within conomy
      internal:
        type: object
        required:
          - createdAt
          - deletedAt
          - updatedAt
          - contentType
          - objectTitle
          - workflow_state
        description: Contains general information about the creator
        properties:
          createdAt:
            type: string
            minLength: 1
            description: Date of creation of the Owner
          deletedAt:
            type: string
            description: Date of Owner's deletion
          updatedAt:
            type: string
            minLength: 1
            description: Date of Owner's update
          contentType:
            type: string
            minLength: 1
            description: Date of creation of the Owner
          objectTitle:
            type: string
          workflow_state:
            type: string
            minLength: 1
            description: Current owner workflow status
      last_name:
        type: string
        minLength: 1
        description: Owner's last name
    required:
      - id
      - name
      - role
      - internal
      - last_name
  MediaBlog:
    description: ''
    type: object
    x-examples:
      example-1:
        id: _media-a62fbebf-0574-4180-996a-7a5ea7802bde
        url: /image/0x0/_media-a62fbebf-0574-4180-996a-7a5ea7802bde.jpg
        size: 5647499
        type: image
        width: 5573
        height: 3715
        source: unsplash
        fileName: photo-1647292545223-7a736ec55b1b.jpg
        internal:
          createdAt: '2022-03-15T16:38:05+00:00'
          deletedAt: ''
          updatedAt: '2022-03-15T16:38:05+00:00'
          contentType: _media
          objectTitle: ''
          workflow_state: saved
        mimeType: image/jpeg
        extension: jpg
        externalId: PJtwruJbqKM
    properties:
      id:
        type: string
        minLength: 1
        description: Unique id for images
      url:
        type: string
        minLength: 1
        description: Address where the image is stored
      size:
        type: number
        description: Total file size
      type:
        type: string
        minLength: 1
      width:
        type: number
        description: Total image width
      height:
        type: number
        description: Total image height
      source:
        type: string
        minLength: 1
      fileName:
        type: string
        minLength: 1
      internal:
        type: object
        required:
          - createdAt
          - deletedAt
          - updatedAt
          - contentType
          - objectTitle
        description: Contains general information about the Image
        properties:
          createdAt:
            type: string
            minLength: 1
            description: Date of image creation
          deletedAt:
            type: string
            description: Image deletion date
          updatedAt:
            type: string
            minLength: 1
            description: Date of last modification made to the image
          contentType:
            type: string
            minLength: 1
          objectTitle:
            type: string
            description: Image title
          workflow_state:
            type: string
            minLength: 1
            description: Current blog workflow status
      mimeType:
        type: string
        minLength: 1
      extension:
        type: string
        minLength: 1
      externaiId:
        type: string
        minLength: 1
    required:
      - id
      - url
      - size
      - type
      - source
      - fileName
      - internal
      - mimeType
      - extension