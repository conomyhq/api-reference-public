swagger: '2.0'
info:
  title: "Conomy Developers \U0001F4D9 API Reference"
  description: "This is **Conomy Developers**, the portal where you cand find our API Reference with everything you need to use our APIs. We've tried to build a friendly documentation, if you have any doubt please don't hesitate to reach us out at hola@conomyhq.com. We hope you enjoy this site \U0001F44B.\n\nCurrently we have a microservices backend architecture serving for different purposes. You can find their description in the left menu with the detail of each of their specific endpoints.\n\n**Addresses Service**: Users addresses information, you can fetch address data with its specific user id, bringing parameters like region, commune, first_address and an optional description address.\n\n**Cards Service**: Cards information, search and match any card that is owned by specific user id and respond an array of card objects. \n\n**Transactions Service**: This service provides transactions information, you can fetch transaction data with its specific card id, bringing parameters like title, amount, currency among others.\n\n**Users Service**: This service provides users information, with its user id you can get all the user data and also make some changes to its personal information.\n\n**Authorization Service**: This service lets the user to have its private pin, letting him take control over his personal data with a configured pin pass. \n\n**Others...*\n\nhttps://giphy.com/gifs/barkpost-barkpost-happy-wednesday-working-like-a-dog-eYilisUwipOEM"
  version: 1.0.0
  contact:
    email: hola@conomyhq.com
    name: Conomy app
host: api.conomy.app
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  apitoken:
    type: apiKey
    name: x-api-key
    in: header
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  '/card/{card_id}':
    get:
      tags:
        - Card
      description: 'The Cards service provides information about user''s cards, and the endpoint /card/{card_id} with the method GET fetch the information about a specific id.'
      summary: "Get a specific card by card ID \U0001F4B3"
      operationId: getCardId
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - type: string
          name: card_id
          in: path
          required: true
          description: card ID
      security:
        - apitoken: []
      responses:
        '200':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    delete:
      tags:
        - Card
      description: 'The Cards service provides information about user''s cards, and the endpoint /card/{card_id} with the method DELETE deletes the information about a specific card id.'
      summary: "Delete a specific card by card ID \U0001F4B3"
      operationId: DeleteCard
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - type: string
          name: card_id
          in: path
          required: true
          description: card ID
      security:
        - apitoken: []
      responses:
        '200':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  /card:
    post:
      tags:
        - Card
      summary: "Create a card and add to a specific user \U0001F45B"
      operationId: createCard
      description: 'The Cards service delivers cards data. The /card endpoint with POST method adds a card owned by a specific user id and save it on an array of card objects, which includes all its cards attributes.'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Card
          description: Card schema
          schema:
            $ref: '#/definitions/CardPatch'
      security:
        - apitoken: []
      responses:
        '201':
          description: Card information
          schema:
            $ref: '#/definitions/CardCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
    patch:
      tags:
        - Card
      summary: "Update a card \U0001F45B"
      operationId: patchCard
      description: 'The Cards service delivers cards data. The /card endpoint with PATCH method updates a card by a specific id.Only set if isActive, isSelected'
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: Card
          description: Card schema
          schema:
            $ref: '#/definitions/CardPatch'
      security:
        - apitoken: []
      responses:
        '201':
          description: Card information
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  '/conomyCard/{conomycard_id}':
    get:
      summary: "Get all the information of a specific Conomy Card \U0001F4B3"
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: getConomyCardId
      description: The Conomy Card service provides all the data about Conomy Cards and the GET method fetch a specific card by its id.
      tags:
        - Conomy Card
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
    parameters:
      - type: string
        name: conomycard_id
        in: path
        required: true
        description: Conomy card ID
    delete:
      summary: "Delete a specific Conomy Card by its conomyCardId \U0001F4B3"
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      operationId: deleteConomyCardId
      description: The Conomy Card service provides all the data about Conomy Cards and the DELETE method deletes a specific card by its id.
      tags:
        - Conomy Card
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
  /conomyCard:
    parameters: []
    post:
      summary: "Create a new Conomy Card \U0001F4B3"
      operationId: postConomyCard
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCardCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Conomy Card
      description: The Conomy Card service host all the data about Conomy Cards and the POST method creates a new Conomy Card based on the attributes provided.
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ConomyCardCreate'
          description: Request are all the attributes but active default payment card and description
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
    patch:
      summary: "Update a Conomy Card \U0001F4B3"
      operationId: patchConomyCard
      consumes:
        - application/json
      tags:
        - Conomy Card
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      description: The Conomy Card service host all the data about Conomy Cards and the PATCH method updates a Conomy Card based on the allowed attributes.
      parameters:
        - in: body
          name: ConomyCard
          schema:
            $ref: '#/definitions/ConomyCardPatch'
          description: Request if is active or not
      security:
        - apitoken: []
      responses:
        '200':
          description: Response a Conomy Card Object
          schema:
            $ref: '#/definitions/ConomyCard'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
  /user:
    post:
      tags:
        - User
      summary: "Create a new user in the db \U0001F929"
      operationId: addUser
      description: 'The Users services provides user information. The /user endpoint with a POST method register a new user in the db with its personal information such as name, last name, national id, phone among other data.'
      consumes:
        - application/json
      security:
        - apitoken: []
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/UserCreate'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
    parameters: []
    patch:
      summary: "Update a user in the db \U0001F929"
      operationId: patchUser
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
      description: The Users services provides user information. The /user endpoint with a PATCH method updates defined updatables attributes in the db.
      tags:
        - User
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UserModify'
          description: There are some attributes that are modifiable
      security:
        - apitoken: []
  '/user/{user_id}':
    get:
      tags:
        - User
      summary: "Get a specific user \U0001F60A"
      operationId: getUser
      description: 'The Users service provides user information. The /users/{id} endpoint with a GET method fetch a specific user by its user id from the db with its personal information such as name, last name, national id, phone among other data.'
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: search results matching criteria
          schema:
            $ref: '#/definitions/User'
          examples:
            example-1:
              id: b92e761a-279a-11ec-9621-0242ac130002
              userExternalId: string
              name: Mauricio
              nickName: JFT
              lastName: Gatica
              email: string
              maritalStatus: string
              phone: '+5691238159123'
              dni: 12.612.412-2
              career: string
              address: Bellas Artes
              status: active
              contractId: 1dhHkkf76
              rulesId:
                - af1gs
                - l2b3f
                - hjg3k3
        '201':
          description: Created
          schema:
            type: object
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      security:
        - apitoken: []
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
        description: User ID
  /switch:
    post:
      summary: "Switch Transaction from Processor\U0001F511"
      operationId: transactionSwitch
      description: The Switch service receive transaction's information. The /transaction endpoint with a POST method register every transaction.
      consumes:
        - application/json
      x-google-backend:
        address: 'https://conomy-switch-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/SwitchTransaction'
          x-examples: {}
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/SwitchTransactionResponse'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Transaction Switch
      security:
        - apitoken: []
    parameters: []
  /switchTowallet:
    post:
      summary: "Switch Transaction To Wallet \U0001F511"
      operationId: transactionSwitchToWallet
      description: The Switch service receive transaction's information. The /transaction endpoint with a POST method register every transaction.
      consumes:
        - application/json
      parameters:
        - in: body
          name: User
          description: User schema
          schema:
            $ref: '#/definitions/SwitchTransactionToWallet'
          x-examples: {}
      responses:
        '201':
          description: matching user
          schema:
            $ref: '#/definitions/SwitchTransactionResponse'
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          examples:
            Unauthorized Error:
              detail: Jwt is missing
              type: AuthError
              code: 401
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          examples:
            Not Found Error:
              detail: The user could not be found in the DB
              type: NotFoundError
              code: 404
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error500'
          examples:
            Server Error:
              detail: Internal Server Error
              type: ServerError
              code: 500
      tags:
        - Transaction Switch
      security:
        - apitoken: []
    parameters: []
  /goals-challenges/composite:
    post:
      summary: Create goal or challenge
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/GoalandChallengeCreateResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: post-v1-goals
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallengeCreate'
          description: Goal & challenge schema
          x-examples: {}
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a POST method register a new goal or challenge in the db with  a goal and challenge model field.
      x-internal: true
      security:
        - apitoken: []
    parameters: []
    get:
      summary: Get goals and challenges by userid
      operationId: get-v1-goals-challenges
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalAndChallenge:
                type: array
                items:
                  $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/ endpoint with a GET method fetch a goals and challenges by user_upayments_uuid
      parameters:
        - type: string
          in: query
          name: user_upayments_uuid
          description: upayments user identifier
      tags:
        - Goals & Challenges
      x-internal: true
      security:
        - apitoken: []
  /goals-challenges/composite/challengesDefault:
    get:
      summary: Get Active challenges in app
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              goalschallenges:
                $ref: '#/definitions/GoalandChallenge'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '201':
          description: Created
          schema:
            type: object
            properties: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-active-challenges
      x-internal: true
      security:
        - apitoken: []
      description: ''
    parameters: []
  /goals-challenges/composite/rules:
    get:
      summary: Get Actives rules in app
      tags:
        - Goals & Challenges
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              rules:
                $ref: '#/definitions/Rule'
              _links:
                type: array
                items:
                  $ref: '#/definitions/_links'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-active-rules
      x-internal: true
      security:
        - apitoken: []
    parameters: []
  '/goals-challenges/composite/{id}':
    get:
      summary: Get goal or challenge by id
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      operationId: get-v1-goals-challenge
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a GET method fetch a specific goal or challenge by id'
      parameters: []
      tags:
        - Goals & Challenges
      x-internal: true
      security:
        - apitoken: []
    put:
      summary: Modify goal or challenge by id
      operationId: put-v1-goals-challenge
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method updates a goal or challenge values by id'
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoalandChallenge'
          x-examples: {}
      tags:
        - Goals & Challenges
      x-internal: true
      security:
        - apitoken: []
    parameters:
      - type: string
        name: id
        in: path
        required: true
    delete:
      summary: Delete goal or challenge by id
      operationId: delete-v1-goals-challenges-id
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error404'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id} endpoint with a PUT method deletes a goal or challenge values by id'
      tags:
        - Goals & Challenges
      x-internal: true
      security:
        - apitoken: []
  '/goals-challenges/composite/{id}/confirm':
    parameters:
      - type: string
        name: id
        in: path
        required: true
        description: Goal or Challenge identifier
    post:
      summary: Complete the setup of an objective or challenge
      operationId: post-v1-goals-challenges-id-confirm
      x-google-backend:
        address: 'https://conomy-composite-goals-and-challenges-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GoalandChallengeResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The goals and challenges service is responsible for storing and handling all goals and challenges of our users. The /goals-challenges/{id}/confirm endpoint with a POST method confirms the goal or challenge attempt, assigning with a status ACTIVE'
      tags:
        - Goals & Challenges
      security:
        - apitoken: []
  /api/auth:
    post:
      summary: Create a new jwt token to interactuate with conomy services
      operationId: post-v1-auth
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GetTokenBody'
          description: This request require an user id from uapyment and and estimated time to live
          x-examples: {}
        - type: string
          name: X-Application-Id
          in: header
          required: true
          description: App id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GetTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'With this method a new jwt token will be created in the conomy authentication service, along with this will come a refresh token that will serve to renew said token and also an expiration date in unix timestamp format, in addition to this the useful links will be referenced of the api'
      tags:
        - Auth
      x-google-backend:
        address: 'https://conomy-jwt-auth-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - apitoken: []
    parameters: []
  /api/auth/validate:
    get:
      security:
        - apitoken: []
      summary: Check if the token is valid or not
      operationId: get-v1-auth-validate
      parameters:
        - type: string
          name: X-Application-Id
          in: header
          required: true
          description: App id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ValidateTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      tags:
        - Auth
      x-google-backend:
        address: 'https://conomy-jwt-auth-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
    parameters: []
  /api/auth/refresh:
    post:
      summary: Refresh a jwt token
      operationId: post-v1-auth-refresh
      consumes:
        - application/json
      parameters:
        - type: string
          name: X-Application-Id
          in: header
          required: true
          description: App id
        - type: string
          name: X-Refresh-Token
          in: header
          required: true
          description: Refresh token id
        - in: body
          name: body
          schema:
            type: object
            properties:
              ttl:
                type: integer
                description: 'time to live until token expire, unix timestamp'
                example: 1651007906
                x-examples: {}
          description: This request require an user id from uapyment and and estimated time to live
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RefreshTokenResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      tags:
        - Auth
      x-google-backend:
        address: 'https://conomy-jwt-auth-service-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      security:
        - apitoken: []
    parameters: []
  /user/deleteRule:
    patch:
      summary: Update user rules by UserID
      operationId: patchUserRule
      responses:
        '200':
          description: Delete rule by user id OK
          schema:
            $ref: '#/definitions/UserDeleteRuleResponse'
        '201':
          description: Created
          schema:
            type: object
            properties: {}
        '400':
          description: Bad Request. A required parameter for this API operation is invalid or has not been provided.
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Invalid or missing authentication token.
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Data not found in the DB.
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error500'
      description: 'The Users service provides user information. The /user/deleteRule endpoint with a PATCH method, updates user rules, deleting a specific rule of specific user by user id from the db.'
      security:
        - apitoken: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/UserDeleteRule'
          description: ''
      x-google-backend:
        address: 'https://conomy-data-report-composite-ylggeyc7ba-uc.a.run.app'
        path_translation: APPEND_PATH_TO_ADDRESS
      tags:
        - User
    parameters: []
  /blog/post:
    get:
      summary: "Get list of blogs \U0001F4D6"
      tags:
        - Blog
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BlogList'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            type: object
            x-examples:
              example-1:
                code: 404
                type: NotFoundError
                detail: The user could not be found in the DB
            properties:
              code:
                type: integer
                example: 500
              type:
                type: string
                example: ErrorObtainingList
              detail:
                type: string
                example: Error obtaining post list from flotiq
            required:
              - code
              - type
              - detail
          examples: {}
      operationId: get-blog-post
      parameters:
        - type: string
          in: header
          name: X-AUTH-TOKEN
          description: Personal Auth token generated for user in Headless CMS application
          required: true
        - type: number
          in: query
          name: offset
          description: Current page number
          default: 1
          minLength: 1
        - type: number
          in: query
          description: limit of blogs on a page
          name: count
          minimum: 1
          default: 10
          maximum: 20
      description: This service allows us to obtain a list of all the blogs that are created on the platform.
  '/blog/post/{tag}':
    parameters:
      - type: string
        name: tag
        in: path
        required: true
        description: Tag of the post to which the content is to be retrieved
    get:
      summary: "Get blog post object \U0001F4D6"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BlogPostObject'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error400'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error401'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error404'
        '500':
          description: Internal Server Error
          schema:
            type: object
            x-examples:
              example-1:
                code: 500
                type: ErrorObtainingList
                detail: Error obtaining post list from flotiq
            properties:
              code:
                type: integer
                example: 500
              type:
                type: string
                example: ErrorObtainingList
              detail:
                type: string
                example: Error obtaining post list from flotiq
      operationId: get-blog-post-tag
      description: 'The Get blog post object service will allow us to obtain all the necessary information about a specific blog, through its {tag}.'
      x-internal: false
definitions:
  Transaction:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
    required:
      - _id
  Token:
    type: object
    description: Jwt token format used by conomy
    properties:
      userId:
        description: upayment user idientifier
        type: string
        example: 52SNfMWOktWVxsfyks6felsafAU24
      appId:
        description: app idientifier
        type: string
        example: '123456'
      exp:
        description: Unix timestamp
        type: integer
        example: 1651007906
    required:
      - upaymentsId
      - appId
      - exp
  GetTokenBody:
    type: object
    description: Body schema to fetch a jwt token
    properties:
      user_upayments_uuid:
        type: string
        description: Upayment user id who is applying to the token
        example: 52SNfMWOktWVxsfyks6felsafAU24
      ttl:
        type: integer
        description: Duration time (min)
        example: 1651007906
    required:
      - user_upayments_uuid
      - ttl
    x-examples:
      example-1:
        user_upayments_uuid: 52SNfMWOktWVxsfyks6felsafAU24
        ttl: 5
  GetTokenResponse:
    type: object
    description: Response schema for a get token method
    properties:
      conomyToken:
        type: string
        description: Conomy jwt token
        example: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
      refreshToken:
        type: string
        description: refresh jwt token
        example: eyJhbGciOiJIUzI1NiIsInR5c.eyJzdWIiOFt2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpM
      expiration:
        type: string
        description: Expiration date (unix time)
        example: '5'
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - conomyToken
      - refreshToken
      - expiration
      - _links
  RefreshTokenResponse:
    type: object
    description: Response schema for a get token method
    properties:
      conomyToken:
        type: string
        description: Conomy jwt token
        example: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
      refreshToken:
        type: string
        description: refresh jwt token
        example: eyJhbGciOiJIUzI1NiIsInR5c.eyJzdWIiOFt2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpM
      expiration:
        description: Unix timestamp
        type: string
        example: '1651007906'
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - conomyToken
      - refreshToken
      - expiration
      - _links
  ValidateTokenResponse:
    type: object
    description: Response schema to a response when validating a token
    properties:
      message:
        type: string
        example: valid token
      userId:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      expiration:
        type: string
        example: '1651007906'
        description: Expiration date
      _links:
        type: array
        items:
          $ref: '#/definitions/_links'
    required:
      - expiration
      - _links
  Address:
    type: object
    description: This is a model to represent user address
    properties:
      id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      user_id:
        type: string
        format: uuid
        example: d04882ef-cf1a-40c9-b571-a6b4fa3514fd
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
      street:
        type: string
        example: Los Pillines
      street_number:
        type: string
      optional_address:
        type: string
        example: '340'
        description: Like an apartment number
    required:
      - id
      - user_id
      - administrative_area_level_1
      - administrative_area_level_2
      - street
      - optional_address
  AddressModify:
    type: object
    properties:
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  AddressCreate:
    type: object
    properties:
      user_id:
        type: string
      administrative_area_level_1:
        type: string
        example: Valparaiso
      administrative_area_level_2:
        type: string
        example: ConCon
      locality:
        type: string
        example: Los Pillines
      optional_address:
        type: string
        example: '340'
      street:
        type: string
      street_number:
        type: string
  Rule:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
    required:
      - id
      - type
      - description
  RuleFiltered:
    type: object
    description: Rule that defines business rules and has its atomic processes to apply to the transaction
    title: ''
    properties:
      id:
        type: string
      type:
        type: string
        description: Rule's type
        example: Profile rule
      description:
        type: string
        description: Rule description for human reading
    required:
      - id
      - type
      - description
  RuleProcess:
    type: object
    description: 'Atomic process definition, it applies one simple operation of the rule. It follows a simple operation syntax, left variable + operation + right variable.'
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
        description: Rule's type
      description:
        type: string
        description: Rule description for human reading
      variable:
        type: string
      operation:
        type: string
      rule_id:
        type: string
    required:
      - id
      - type
      - description
  Card:
    type: object
    x-examples: {}
    properties:
      id:
        type: string
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        description: user conomy identifier
      issuingBank:
        type: string
        example: Banco De Chile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT, UNDEFINED'
        example: 'CREDIT, DEBIT, UNDEFINED'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
    required:
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  CardCreate:
    type: object
    x-examples:
      example-1:
        id: 96daafcf-9f83-4c2c-8706-eb557e20c23c
        card_issuer: BancoDeChile
        card_brand: MasterCard
        holder_card_name: Pablo insulza
        card_number: '************1234'
        currency: CLP
        is_active: false
        created_at: '2017-07-21T17:32:28Z'
        updated_at: '2017-07-21T17:32:28Z'
        color: string
        card_account_type: cuenta vista
        description: {}
    properties:
      externalId:
        type: string
        description: Card external identifier
      userId:
        type: string
        description: User conomy id
      issuingBank:
        type: string
        example: Banco De Chile
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
        description: 'MASTERCARD, VISA, AMEX, MAGNA'
      cardholderName:
        type: string
        example: Pablo insulza
        description: name shown on card
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      color:
        type: string
        description: User-defined card color (HEX)
      cardType:
        type: string
        description: 'PREPAID, DEBIT, CREDIT'
      description:
        type: string
        description: Info shown on conomy app
      priority:
        type: string
        description: 'Card priority. MAIN: Principal card, BACKUP: Second card'
    required:
      - externalId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
  CardPatch:
    type: object
    x-examples: {}
    title: CardPatch
    description: Description of a PATCH method where is possible to update selected card
    properties:
      id:
        type: string
        description: Card external identifier
      isActive:
        type: boolean
        example: false
        description: Card state
    required:
      - id
      - isActive
  ConomyCard:
    type: object
    title: Conomy Card
    description: ''
    properties:
      id:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      isActive:
        type: boolean
        example: false
        description: Card state
      createdAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      updatedAt:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
      description:
        type: string
    required:
      - id
      - userId
      - issuingBank
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  ConomyCardCreate:
    type: object
    title: Conomy Card Create
    description: ''
    properties:
      externalId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      userId:
        type: string
        format: uuid
        example: 96daafcf-9f83-4c2c-8706-eb557e20c23c
      issuingBank:
        type: string
        description: Issuing Bank
      cardBrand:
        type: string
        example: MasterCard
      cardholderName:
        type: string
        example: Pablo insulza
      pan:
        type: string
        example: '************1234'
        description: Obfuscated card number
      currency:
        type: string
        example: CLP
        description: Card Currency
      description:
        type: string
      isActive:
        type: string
        example: 'true'
    required:
      - externalId
      - cardBrand
      - cardholderName
      - pan
      - currency
      - isActive
  ConomyCardPatch:
    type: object
    title: Conomy Card Patch
    description: Description of a PATCH method where is possible to update selected card
    properties:
      id:
        type: string
        format: objectId
        example: 628e7dccc22a0821b516fb55
      isActive:
        type: string
        example: 'true'
    required:
      - id
      - isActive
  User:
    type: object
    description: Conomy User Model
    properties:
      id:
        type: string
        example: b92e761a-279a-11ec-9621-0242ac130002
      userExternalId:
        type: string
        description: User u-payments uuid
      name:
        type: string
        example: MAURICIO
        description: User name
      nickName:
        type: string
        example: JFT
        description: user nickname
      lastName:
        type: string
        example: GATICA
        description: user last name
      email:
        type: string
        description: user email
      phone:
        type: string
        example: '+5691238159123'
        description: phone number
      dni:
        type: string
        example: 12612412-2
        description: Unique country identifier
      career:
        type: string
        description: User career/ocuppation
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
    required:
      - id
      - userExternalId
      - name
      - lastName
      - email
      - phone
      - dni
      - career
      - address
      - status
      - contractId
  UserModify:
    description: ''
    type: object
    x-examples:
      example-1:
        user_id: b92e761a-279a-11ec-9621-0242ac130002
        name: Mauricio
        nick_name: JFT
        last_name: Gatica
        rut: 12.612.412-2
        phone: '+5691238159123'
        account: user
        password_pin: '2424'
        profession: string
        gender: string
        civil_status: string
        email: string
    properties:
      email:
        type: string
        minLength: 1
        description: user email
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
      rulesId:
        type: array
        example:
          - af1gs
          - l2b3f
          - hjg3k3
        items:
          type: string
  UserCreate:
    type: object
    properties:
      userExternalId:
        type: string
        description: user u-payments uuid
      name:
        type: string
        example: MAURICIO
        description: user name
      lastName:
        type: string
        example: GATICA
        description: user last name
      nickName:
        type: string
        description: User nickname
      email:
        type: string
        description: user email
      dni:
        type: string
        example: 12612412-2
        description: Unique country identifier
      phone:
        type: string
        description: '+56981234567'
      career:
        type: string
        description: user career/ocuppation
      gender:
        type: string
        description: 'FEMALE, MALE, OTHER'
      address:
        type: string
        example: Bellas Artes
      status:
        type: string
        example: active
      contractId:
        type: string
        example: 1dhHkkf76
    required:
      - userExternalId
  SwitchTransaction:
    description: ''
    type: object
    x-examples: {}
    properties:
      identifier:
        type: string
        minLength: 1
        description: Upayment user id
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
      description:
        type: string
        minLength: 1
      timestamp:
        type: string
        minLength: 1
        default: 'yyyy-mm-dd hh:mm:ss'
      origin:
        type: string
        minLength: 1
        default: AliExpress GRB
    required:
      - identifier
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
      - description
      - timestamp
      - origin
  SwitchTransactionInWallet:
    description: ''
    type: object
    x-examples: {}
    properties:
      identifier:
        type: string
        minLength: 1
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
      description:
        type: string
        minLength: 1
      timestamp:
        type: string
        minLength: 1
        default: 'yyyy-mm-dd hh:mm:ss'
      origin:
        type: string
        minLength: 1
        default: AliExpress GRB
      idCard:
        type: string
        minLength: 1
        format: ObjectId
    required:
      - identifier
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
      - description
      - timestamp
      - origin
      - idCard
  SwitchTransactionToWallet:
    description: ''
    x-examples: {}
    title: ''
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/SwitchTransactionInWallet'
      totalAmount:
        type: number
  SwitchTransactionResponse:
    description: ''
    type: object
    properties:
      idConomyCardReferenceToken:
        type: string
        minLength: 1
      amount:
        type: string
        minLength: 1
      currency:
        type: string
        minLength: 1
      transactionId:
        type: string
        minLength: 1
      links:
        type: array
        items:
          properties: {}
    required:
      - idConomyCardReferenceToken
      - amount
      - currency
      - transactionId
      - links
    x-examples:
      example-1:
        idConomyCardReferenceToken: asd
        amount: as
        currency: clp
        transactionId: iasd
        links: []
  Error400:
    title: BadRequestError
    type: object
    x-examples: {}
    properties:
      code:
        type: number
        example: 2
      type:
        type: string
        example: GenericError
      detail:
        type: string
        example: A required parameter for this API operation is invalid or has not been provided
    required:
      - code
      - type
      - detail
    description: ''
  Error401:
    title: UnauthorizedError
    type: object
    x-examples:
      Unauthorized Error 401:
        detail: Jwt is missing
        type: AuthError
        code: 3
    properties:
      code:
        type: number
        example: 401
      type:
        type: string
        example: AuthError
      detail:
        type: string
        example: Jwt is missing
    required:
      - code
      - type
      - detail
  Error404:
    title: NotFoundError
    type: object
    x-examples:
      example-1:
        code: 4
        type: UserNotFound
        detail: The user could not be found in the DB
    properties:
      code:
        type: number
        example: 404
      type:
        type: string
        example: NotFoundError
      detail:
        type: string
        example: The user could not be found in the DB
    required:
      - code
      - type
      - detail
  Error500:
    title: InternalServerError
    type: object
    x-examples:
      example-1:
        code: 5
        type: ServerError
        detail: Internal Server Error
    properties:
      code:
        type: number
        example: 500
      type:
        type: string
        example: ServerError
      detail:
        type: string
        example: Internal Server Error
    required:
      - code
      - type
      - detail
  GoalandChallenge:
    title: Goal&Challenge Response
    type: object
    description: Goal and challenge response model
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
        description: 'GOAL , CHALLENGE, CHALLENGE_DEFAULT'
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      currentAmount:
        type: number
      rules:
        type: array
        items:
          type: string
      payDayAmount:
        type: string
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      createdAt:
        type: string
      updatedAt:
        type: string
  GoalandChallengeResponse:
    type: object
    x-examples:
      example-1:
        id: string
        userId: string
        userExternalId: string
        type: string
        description:
          title: string
          image: string
          color: string
          detail: string
        endTime: string
        targetAmount: 0
        currentAmount: 0
        rules:
          - string
        payDayAmount: string
        status: string
        created_at: string
        updated_at: string
    properties:
      id:
        type: string
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      currentAmount:
        type: number
      rules:
        type: array
        items:
          type: string
      payDayAmount:
        type: string
      status:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
      _links:
        $ref: '#/definitions/_links'
  GoalandChallengeModify:
    title: Goal&ChallengeModify
    type: object
    description: Goal and challenge model
    properties:
      type:
        type: string
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
      endTime:
        type: string
      targetAmount:
        type: number
      currentAmount:
        type: number
      status:
        type: string
        description: 'INACTIVE, ACTIVE, COMPLETE, PENDING'
      rules:
        type: array
        description: rulesId
        items:
          type: string
  GoalandChallengeCreate:
    type: object
    x-examples:
      example-1:
        id: string
        userId: string
        userExternalId: string
        type: string
        description:
          title: string
          image: string
          color: string
          detail: string
        endTime: string
        targetAmount: 0
        currentAmount: 0
        rules:
          - string
        payDayAmount: string
        status: string
        created_at: string
        updated_at: string
    properties:
      userId:
        type: string
      userExternalId:
        type: string
      type:
        type: string
        description: 'GOAL,CHALLENGE,CHALLENGE_DEFAULT'
      description:
        type: object
        properties:
          title:
            type: string
          image:
            type: string
          color:
            type: string
          detail:
            type: string
        required:
          - title
      endTime:
        type: string
      targetAmount:
        type: number
      currentAmount:
        type: number
      rules:
        type: array
        items:
          type: string
      payDayAmount:
        type: string
      status:
        type: string
        description: 'INACTIVE,ACTIVE,COMPLETE,PENDING'
    required:
      - userId
      - userExternalId
      - type
  GoalandChallengeCreateResponse:
    $ref: '#/definitions/GoalandChallengeResponse'
  _links:
    title: _links
    type: object
    description: A list of link types and descriptions.
    properties:
      rel:
        type: string
        description: This describes the type of links
      route:
        type: string
        description: This property contais a full-qualified URL
      method:
        type: string
        description: The HTTP method that should be used
      targetSchema:
        type: string
        description: 'For requests, this is a URL representing the schema that the response should conform to.'
      schema:
        type: string
        description: 'For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.'
    required:
      - rel
      - route
      - method
  BlogList:
    type: object
    x-examples: {}
    properties:
      totalBlogs:
        type: number
        description: Number of the total blogs
        example: 4
      totalPages:
        type: number
        description: 'Number of the total pages '
        example: 1
      currentPage:
        type: number
        description: Number of the current page
        example: 1
      data:
        type: array
        uniqueItems: true
        minItems: 1
        items:
          $ref: '#/definitions/BlogPostListData'
    required:
      - totalBlogs
      - totalPages
      - currentPage
      - data
  BlogPostObject:
    type: object
    x-examples:
      example-1:
        id: blogpost-341099
        tag: nuestra_historia
        title: Nuestra historia
        estimatedTime: 7
        writer:
          id: owner-338894
          name: Pablo
          last_name: Acuña
          image:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-966f25c5-6cda-45e8-97aa-2f2b2cc5da99.png'
        internal:
          contentType: blogpost
          createdAt: '2022-05-31T18:50:47+00:00'
          updatedAt: '2022-06-28T18:11:51+00:00'
          deletedAt: ''
        content: |
          Hola, mi nombre es Pablo, tengo 31 años y soy ingeniero comercial. Desde que empecé mi carrera, siempre me gustaron los ramos y temas de Economía, Finanzas y Contabilidad, quizás este ultimo un poco menos. Pero independiente de eso, desde bastante chico, incluso antes de terminar la Universidad, mis finanzas personales se volvieron un problema…

          ### Gastar sin pensar

          Aquí mi historia: Al poco tiempo de egresado, conseguí un trabajo en una empresa que me gustaba. Era mi primera pega como comercial, antes había trabajado como: empaquetador en época navideña, promotor de super, ayudante en la U y varias otras pegas, pero siempre *part time*, este iba a ser mi primer trabajo a tiempo completo. Con mi primer sueldo pagué algunas deudas que arrastraba desde mi época de estudiante, pero no demoré mucho y volví a endeudarme y esta vez no por tan poco... 

          Me compré un auto sin haber ahorrado ni un peso. Y como pueden imaginarse la cuota que pagaba era alta (¡Obvio!), aproximadamente la mitad de mi sueldo. Además tenía que pagar las cuotas de mis tarjetas de crédito, compras de ropa, zapatillas, pagar el gimnasio (al que además no iba) o cualquier otro panorama que se te pudiera ocurrir, yo lo hacía; si total ya tenía un trabajo estable y con él un sueldo mensual. Dándole una vuelta ahora, claramente es una pésima forma de pensar…

          ![Alt Text](https://media.giphy.com/media/Kerg053G7ZJUQ/giphy.gif)

          Pasó menos de un año y los problemas se agrandaron. Seguí gastando sin pensar y así es que gastaba más de lo que ganaba y ese en realidad es el gran problema. Varios meses tuve que depender de la línea de crédito para llegar a fin de mes y esa no es una cómoda forma de vivir como se imaginarán…

          ### Pensé que se resolvería solo ...

          Seguía pensando que no importaba este desorden, que no era un problema real. Yo estaba seguro que lo resolvería o mejor dicho, que se resolvería solo, sin que yo tuviera nada que hacer para solucionarlo - como si yo no hubiese sido culpable del mismo problema-. Pensaba que tenía que aprovechar el tiempo y disfrutar mientras era joven. En fin, seguí gastando sin medir las consecuencias. El ahorro y la inversión eran dos cosas que no conocía.

          Me ofrecieron otro puesto dentro de la misma empresa y mis problemas financieros no se solucionaron… Por mis deudas, compras en cuotas y forma de gastar en general, algunos meses llegué a pagar cuotas de mi tarjeta que eran más altas que mi sueldo. 

          Es durísimo vivir así, empecé a dormir menos, a sufrir angustia y varias otras cosas negativas, pero bueno, era una lata, sobre todo porque lo que estaba sufriendo era netamente mi culpa.

          ![Alt Text](https://media.giphy.com/media/xT5LMz2DWrwmbfVBK0/giphy.gif)

           Ahí me di cuenta de algo: No importa lo que ganes, lo que importa es el equilibrio entre lo que ganas y lo que gastas… Suena lógico, lo sé, pero es difícil darse cuenta cuando uno mismo es el que se equivoca.

          ### Una tarea monumental 

          Ahora para solucionar el problema en el que yo mismo me había metido, tenía que hacer algo y seguramente no iba a ser tan fácil como gastar sin pensar... Pensándolo bien, era justamente lo opuesto, primero pensar y después gastar.

          Lo primero que hice fue entender cuánto estaba gastando y en qué. Así que entré a las páginas de mis bancos (en esa época tenía cuentas en 3 bancos diferentes) y me di cuenta de lo difícil que era… En mi cuenta corriente tenía un saldo, en mi tarjeta de crédito tenía una deuda, saber cuánto tendría que pagar el próximo mes era casi imposible. Movimientos facturados, no facturados, pago mínimo y una lista de comercios con nombres que jamás había leído ni escuchado. Además tuve que hacer lo mismo para los tres bancos donde tenía cuenta. Si era difícil con uno, con tres era una tarea monumental…

          Le conté mi problema a varios amigos y me llamó la atención que yo no era el único. Había muchos con el mismo problema. Aquí noté que algo no estaba bien y me pregunté: “¿Cuánta gente tendrá este mismo problema?”

          > **Les doy un par de datos actuales:** Hoy los latinoamericanos estamos usando en promedio 4.9 tarjetas diferentes y tenemos 10 productos financieros distintos. Nuestro dinero está dividido en diferentes lugares y llevar el control del mismo se hace muy difícil y en consecuencia costoso, pero ¿cuán costoso? Para que se hagan una idea, los latinoamericanos en promedio debemos 7 de cada 11 pesos que ganamos. **¡SÍ! Casi el 70% de nuestros ingresos.**

          En ese entonces me di cuenta que algo andaba mal y si nadie hacía algo al respecto esto seguiría empeorando. Pero *zapatero a tus zapatos*,  primero tenía que resolver mi problema...

          ![Alt Text](https://media.giphy.com/media/AvMJCeu1EMmhG/giphy.gif)

          Para solucionarlo tuve que dedicar mucho tiempo, armar una planilla con mi presupuesto y otra para llevar el control de cada uno de mis gastos (sí, de cada uno). Las cuadraba semanalmente con la información que sacaba de mi banco y la comparaba con la que yo llevaba enlistada y bueno, después de mucho trabajo y esfuerzo lo logré. 

          Claramente no fue tan rápido como lo cuento en este artículo, y de seguro mi método no fue el óptimo en cuanto al esfuerzo y tiempo dedicado, pero tenía que salir de ese problema de alguna forma. Me demoré aproximadamente 3 años en salir del hoyo que yo mismo había cavado. 

          Pasaron un par de años y mis finanzas continuaron “sanas”, pero el problema sigue existiendo para muchos chilenos y latinoamericanos. 

          ### Una solución para todos

          Yo sobre programación, desarrollo de software y pagos digitales no sabía casi nada… y estos temas eran claves para poder entregar una solución real.

          Un día me junté con un amigo (y actual socio), Felipe. Él venía llegando desde Europa donde había estado trabajando justamente en tecnología, pagos digitales y conocía bastante del ecosistema Fintech (en ese momento yo ni siquiera sabía que era una Fintech). Cuando le conté el problema que había vivido y lo difícil de solucionar, en conjunto decidimos crear Conomy (claro que el nombre nació después).

          ![Alt Text](https://media.giphy.com/media/ieEGqpcjvuI0YEN0Rm/giphy.gif)

          Conomy tiene el fin de poder ayudar a las personas a simplificar sus finanzas, que puedan entender cómo y dónde gastan y que ahorrar e invertir sea fácil y hasta divertido. Que nadie tenga que poner tanto esfuerzo como yo puse para solucionar mis temas financieros.

          Conomy es una tarjeta con el poder de manejar a todas las demás. Una sola clave que recordar y así Conomy es todas las tarjetas en una. **¿Conomy sirve para pagar? ¡Sí!** Esto es fundamental para poder realmente ayudarte a entender cómo gastas, ya que si usas 2, 3 o más tarjetas para pagar se hace inmanejable. Con Conomy usas la cantidad de tarjetas que quieras, pero solo pagas con una.

          Conomy también es una aplicación para que puedas siempre tener el control de tu plata, generar presupuestos, ahorrar e invertir de forma fácil, para que alcances tus objetivos personales.

          No tienes que ser un experto financiero para usar Conomy, de hecho todo lo contrario, está creada para que puedas relajarte, vivir tu vida y que nos dejes las finanzas a nosotros.
          Olvídate de cuadrar planillas de banco, de no saber cuánto has gastado ni en dónde. Hacemos fácil lo que hasta ahora había sido difícil.

          Esta historia está recién comenzando, actualmente estamos esperando la última aprobación por parte de CMF para poder emitir nuestra tarjeta para el mercado chileno. Ya estamos en la última parte previa al lanzamiento y decidimos armar este blog para: hablar sobre educación financiera, comunicar nuestra opinión sobre algunos temas de actualidad y hablar de tecnología (esa parte no la escribo yo claramente), entre otros temas. Pero sobre todo, y que quede bien claro: Ayudar a las personas en sus finanzas personales.
        media:
          thumbnail:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-159c16ad-983a-404c-8e8c-a6ebb8f33f9a.png'
          headerImage:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-159c16ad-983a-404c-8e8c-a6ebb8f33f9a.png'
        description: Esta es la historia de cómo se ideó y nació Conomy. Lo que pasó antes de y lo que gatilló la creación de esta Fintech que viene a mejorar las finanzas personales de los chilenos y latinoamericanos.
        breadCrum:
          id: breadcrum-982488
          name: Nosotros
        published: true
    description: ''
    properties:
      id:
        type: string
        description: Unique id for each blog
      tag:
        type: string
        description: Title tag for urls
      title:
        type: string
        description: Blog title
      estimatedTime:
        type: integer
        description: Estimated reading time in minutes
      writer:
        type: object
        properties:
          id:
            type: string
            description: Unique id belonging to a single Owner
          name:
            type: string
            description: Owner's name
          last_name:
            type: string
            description: Owner's last name
          image:
            type: object
            description: Owner's image
            properties:
              dataUrl:
                type: string
        required:
          - id
          - name
          - last_name
      internal:
        type: object
        description: 'Contains general information about the blog. For example, date of publication, deletion. '
        properties:
          contentType:
            type: string
          createdAt:
            type: string
            description: Date of blog creation
          updatedAt:
            type: string
            description: Date of last modification made to the blog
          deletedAt:
            type: string
            description: Date and time of blog deletion
        required:
          - contentType
          - createdAt
      content:
        type: string
        description: Blog content.
      media:
        type: object
        description: Images of the blog.
        required:
          - headerImage
        properties:
          thumbnail:
            type: object
            properties:
              dataUrl:
                type: string
          headerImage:
            type: object
            properties:
              dataUrl:
                type: string
      description:
        type: string
        description: Short summary of the blog
      breadCrum:
        type: object
        description: Topic of the blog
        properties:
          id:
            type: string
          name:
            type: string
      published:
        type: boolean
        description: Establishes whether the blog has been published or not.
    required:
      - id
      - tag
      - title
      - breadCrum
      - published
  BlogPostListData:
    type: object
    x-examples:
      example-1:
        id: blogpost-341099
        tag: nuestra_historia
        title: Nuestra historia
        estimatedTime: 7
        writer:
          id: owner-338894
          name: Pablo
          last_name: Acuña
          image:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-966f25c5-6cda-45e8-97aa-2f2b2cc5da99.png'
        internal:
          contentType: blogpost
          createdAt: '2022-05-31T18:50:47+00:00'
          updatedAt: '2022-06-28T18:11:51+00:00'
          deletedAt: ''
        media:
          thumbnail:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-159c16ad-983a-404c-8e8c-a6ebb8f33f9a.png'
          headerImage:
            dataUrl: 'https://api.flotiq.com/image/0x0/_media-159c16ad-983a-404c-8e8c-a6ebb8f33f9a.png'
        description: Esta es la historia de cómo se ideó y nació Conomy. Lo que pasó antes de y lo que gatilló la creación de esta Fintech que viene a mejorar las finanzas personales de los chilenos y latinoamericanos.
        breadCrum:
          id: breadcrum-982488
          name: Nosotros
        published: true
    description: ''
    properties:
      id:
        type: string
        description: Unique id for each blog
      tag:
        type: string
        description: Title tag for urls
      title:
        type: string
        description: Blog title
      estimatedTime:
        type: integer
        description: Estimated reading time in minutes
      writer:
        type: object
        description: Contains information about the person who wrote the blog.
        properties:
          id:
            type: string
            description: Unique id belonging to a single Owner
          name:
            type: string
            description: Owner's name
          last_name:
            type: string
            description: Owner's last name
          image:
            type: object
            description: Owner's image
            properties:
              dataUrl:
                type: string
                description: Thumbnail image of the writer
            required:
              - dataUrl
        required:
          - id
          - name
          - last_name
      internal:
        type: object
        description: 'Contains general information about the blog. For example, date of publication, deletion or status'
        properties:
          contentType:
            type: string
          createdAt:
            type: string
          updatedAt:
            type: string
          deletedAt:
            type: string
        required:
          - contentType
      media:
        type: object
        description: Images of the blog.
        properties:
          thumbnail:
            type: object
            properties:
              dataUrl:
                type: string
          headerImage:
            type: object
            properties:
              dataUrl:
                type: string
        required:
          - headerImage
      description:
        type: string
        description: Short summary of the blog
      breadCrum:
        type: object
        description: Topic of the blog
        properties:
          id:
            type: string
          name:
            type: string
      published:
        type: boolean
        description: Establishes whether the blog has been published or not.
    required:
      - id
      - tag
      - title
      - estimatedTime
      - breadCrum
      - published
  UserDeleteRule:
    title: UserDeleteRule
    x-stoplight:
      id: 645p7cj6e54et
    type: object
    x-examples: {}
    properties:
      id:
        type: string
      ruleId:
        type: string
  UserDeleteRuleResponse:
    title: UserDeleteRuleResponse
    x-stoplight:
      id: hbm1aveg426kw
    type: object
    description: ''
    properties:
      isDeleted:
        type: boolean
